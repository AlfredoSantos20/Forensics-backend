
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model OTP
 * 
 */
export type OTP = $Result.DefaultSelection<Prisma.$OTPPayload>
/**
 * Model PlantCategory
 * 
 */
export type PlantCategory = $Result.DefaultSelection<Prisma.$PlantCategoryPayload>
/**
 * Model PlantInfo
 * 
 */
export type PlantInfo = $Result.DefaultSelection<Prisma.$PlantInfoPayload>
/**
 * Model PlantGallery
 * 
 */
export type PlantGallery = $Result.DefaultSelection<Prisma.$PlantGalleryPayload>
/**
 * Model PlantConditions
 * 
 */
export type PlantConditions = $Result.DefaultSelection<Prisma.$PlantConditionsPayload>
/**
 * Model PlantCare
 * 
 */
export type PlantCare = $Result.DefaultSelection<Prisma.$PlantCarePayload>
/**
 * Model PlantPest
 * 
 */
export type PlantPest = $Result.DefaultSelection<Prisma.$PlantPestPayload>
/**
 * Model PlantFeature
 * 
 */
export type PlantFeature = $Result.DefaultSelection<Prisma.$PlantFeaturePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  CUSTOMER: 'CUSTOMER',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oTP`: Exposes CRUD operations for the **OTP** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OTPS
    * const oTPS = await prisma.oTP.findMany()
    * ```
    */
  get oTP(): Prisma.OTPDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plantCategory`: Exposes CRUD operations for the **PlantCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantCategories
    * const plantCategories = await prisma.plantCategory.findMany()
    * ```
    */
  get plantCategory(): Prisma.PlantCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plantInfo`: Exposes CRUD operations for the **PlantInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantInfos
    * const plantInfos = await prisma.plantInfo.findMany()
    * ```
    */
  get plantInfo(): Prisma.PlantInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plantGallery`: Exposes CRUD operations for the **PlantGallery** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantGalleries
    * const plantGalleries = await prisma.plantGallery.findMany()
    * ```
    */
  get plantGallery(): Prisma.PlantGalleryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plantConditions`: Exposes CRUD operations for the **PlantConditions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantConditions
    * const plantConditions = await prisma.plantConditions.findMany()
    * ```
    */
  get plantConditions(): Prisma.PlantConditionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plantCare`: Exposes CRUD operations for the **PlantCare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantCares
    * const plantCares = await prisma.plantCare.findMany()
    * ```
    */
  get plantCare(): Prisma.PlantCareDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plantPest`: Exposes CRUD operations for the **PlantPest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantPests
    * const plantPests = await prisma.plantPest.findMany()
    * ```
    */
  get plantPest(): Prisma.PlantPestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plantFeature`: Exposes CRUD operations for the **PlantFeature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantFeatures
    * const plantFeatures = await prisma.plantFeature.findMany()
    * ```
    */
  get plantFeature(): Prisma.PlantFeatureDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Customer: 'Customer',
    Admin: 'Admin',
    OTP: 'OTP',
    PlantCategory: 'PlantCategory',
    PlantInfo: 'PlantInfo',
    PlantGallery: 'PlantGallery',
    PlantConditions: 'PlantConditions',
    PlantCare: 'PlantCare',
    PlantPest: 'PlantPest',
    PlantFeature: 'PlantFeature'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "customer" | "admin" | "oTP" | "plantCategory" | "plantInfo" | "plantGallery" | "plantConditions" | "plantCare" | "plantPest" | "plantFeature"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      OTP: {
        payload: Prisma.$OTPPayload<ExtArgs>
        fields: Prisma.OTPFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OTPFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OTPFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          findFirst: {
            args: Prisma.OTPFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OTPFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          findMany: {
            args: Prisma.OTPFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>[]
          }
          create: {
            args: Prisma.OTPCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          createMany: {
            args: Prisma.OTPCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OTPDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          update: {
            args: Prisma.OTPUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          deleteMany: {
            args: Prisma.OTPDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OTPUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OTPUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          aggregate: {
            args: Prisma.OTPAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOTP>
          }
          groupBy: {
            args: Prisma.OTPGroupByArgs<ExtArgs>
            result: $Utils.Optional<OTPGroupByOutputType>[]
          }
          count: {
            args: Prisma.OTPCountArgs<ExtArgs>
            result: $Utils.Optional<OTPCountAggregateOutputType> | number
          }
        }
      }
      PlantCategory: {
        payload: Prisma.$PlantCategoryPayload<ExtArgs>
        fields: Prisma.PlantCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCategoryPayload>
          }
          findFirst: {
            args: Prisma.PlantCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCategoryPayload>
          }
          findMany: {
            args: Prisma.PlantCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCategoryPayload>[]
          }
          create: {
            args: Prisma.PlantCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCategoryPayload>
          }
          createMany: {
            args: Prisma.PlantCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlantCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCategoryPayload>
          }
          update: {
            args: Prisma.PlantCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCategoryPayload>
          }
          deleteMany: {
            args: Prisma.PlantCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlantCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCategoryPayload>
          }
          aggregate: {
            args: Prisma.PlantCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlantCategory>
          }
          groupBy: {
            args: Prisma.PlantCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<PlantCategoryCountAggregateOutputType> | number
          }
        }
      }
      PlantInfo: {
        payload: Prisma.$PlantInfoPayload<ExtArgs>
        fields: Prisma.PlantInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantInfoPayload>
          }
          findFirst: {
            args: Prisma.PlantInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantInfoPayload>
          }
          findMany: {
            args: Prisma.PlantInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantInfoPayload>[]
          }
          create: {
            args: Prisma.PlantInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantInfoPayload>
          }
          createMany: {
            args: Prisma.PlantInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlantInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantInfoPayload>
          }
          update: {
            args: Prisma.PlantInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantInfoPayload>
          }
          deleteMany: {
            args: Prisma.PlantInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlantInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantInfoPayload>
          }
          aggregate: {
            args: Prisma.PlantInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlantInfo>
          }
          groupBy: {
            args: Prisma.PlantInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantInfoCountArgs<ExtArgs>
            result: $Utils.Optional<PlantInfoCountAggregateOutputType> | number
          }
        }
      }
      PlantGallery: {
        payload: Prisma.$PlantGalleryPayload<ExtArgs>
        fields: Prisma.PlantGalleryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantGalleryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGalleryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantGalleryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGalleryPayload>
          }
          findFirst: {
            args: Prisma.PlantGalleryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGalleryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantGalleryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGalleryPayload>
          }
          findMany: {
            args: Prisma.PlantGalleryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGalleryPayload>[]
          }
          create: {
            args: Prisma.PlantGalleryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGalleryPayload>
          }
          createMany: {
            args: Prisma.PlantGalleryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlantGalleryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGalleryPayload>
          }
          update: {
            args: Prisma.PlantGalleryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGalleryPayload>
          }
          deleteMany: {
            args: Prisma.PlantGalleryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantGalleryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlantGalleryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGalleryPayload>
          }
          aggregate: {
            args: Prisma.PlantGalleryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlantGallery>
          }
          groupBy: {
            args: Prisma.PlantGalleryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantGalleryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantGalleryCountArgs<ExtArgs>
            result: $Utils.Optional<PlantGalleryCountAggregateOutputType> | number
          }
        }
      }
      PlantConditions: {
        payload: Prisma.$PlantConditionsPayload<ExtArgs>
        fields: Prisma.PlantConditionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantConditionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantConditionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantConditionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantConditionsPayload>
          }
          findFirst: {
            args: Prisma.PlantConditionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantConditionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantConditionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantConditionsPayload>
          }
          findMany: {
            args: Prisma.PlantConditionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantConditionsPayload>[]
          }
          create: {
            args: Prisma.PlantConditionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantConditionsPayload>
          }
          createMany: {
            args: Prisma.PlantConditionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlantConditionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantConditionsPayload>
          }
          update: {
            args: Prisma.PlantConditionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantConditionsPayload>
          }
          deleteMany: {
            args: Prisma.PlantConditionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantConditionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlantConditionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantConditionsPayload>
          }
          aggregate: {
            args: Prisma.PlantConditionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlantConditions>
          }
          groupBy: {
            args: Prisma.PlantConditionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantConditionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantConditionsCountArgs<ExtArgs>
            result: $Utils.Optional<PlantConditionsCountAggregateOutputType> | number
          }
        }
      }
      PlantCare: {
        payload: Prisma.$PlantCarePayload<ExtArgs>
        fields: Prisma.PlantCareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantCareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCarePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantCareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCarePayload>
          }
          findFirst: {
            args: Prisma.PlantCareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCarePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantCareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCarePayload>
          }
          findMany: {
            args: Prisma.PlantCareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCarePayload>[]
          }
          create: {
            args: Prisma.PlantCareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCarePayload>
          }
          createMany: {
            args: Prisma.PlantCareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlantCareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCarePayload>
          }
          update: {
            args: Prisma.PlantCareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCarePayload>
          }
          deleteMany: {
            args: Prisma.PlantCareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantCareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlantCareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantCarePayload>
          }
          aggregate: {
            args: Prisma.PlantCareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlantCare>
          }
          groupBy: {
            args: Prisma.PlantCareGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantCareGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantCareCountArgs<ExtArgs>
            result: $Utils.Optional<PlantCareCountAggregateOutputType> | number
          }
        }
      }
      PlantPest: {
        payload: Prisma.$PlantPestPayload<ExtArgs>
        fields: Prisma.PlantPestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantPestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantPestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPestPayload>
          }
          findFirst: {
            args: Prisma.PlantPestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantPestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPestPayload>
          }
          findMany: {
            args: Prisma.PlantPestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPestPayload>[]
          }
          create: {
            args: Prisma.PlantPestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPestPayload>
          }
          createMany: {
            args: Prisma.PlantPestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlantPestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPestPayload>
          }
          update: {
            args: Prisma.PlantPestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPestPayload>
          }
          deleteMany: {
            args: Prisma.PlantPestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantPestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlantPestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPestPayload>
          }
          aggregate: {
            args: Prisma.PlantPestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlantPest>
          }
          groupBy: {
            args: Prisma.PlantPestGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantPestGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantPestCountArgs<ExtArgs>
            result: $Utils.Optional<PlantPestCountAggregateOutputType> | number
          }
        }
      }
      PlantFeature: {
        payload: Prisma.$PlantFeaturePayload<ExtArgs>
        fields: Prisma.PlantFeatureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantFeatureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantFeaturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantFeatureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantFeaturePayload>
          }
          findFirst: {
            args: Prisma.PlantFeatureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantFeaturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantFeatureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantFeaturePayload>
          }
          findMany: {
            args: Prisma.PlantFeatureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantFeaturePayload>[]
          }
          create: {
            args: Prisma.PlantFeatureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantFeaturePayload>
          }
          createMany: {
            args: Prisma.PlantFeatureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlantFeatureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantFeaturePayload>
          }
          update: {
            args: Prisma.PlantFeatureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantFeaturePayload>
          }
          deleteMany: {
            args: Prisma.PlantFeatureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantFeatureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlantFeatureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantFeaturePayload>
          }
          aggregate: {
            args: Prisma.PlantFeatureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlantFeature>
          }
          groupBy: {
            args: Prisma.PlantFeatureGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantFeatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantFeatureCountArgs<ExtArgs>
            result: $Utils.Optional<PlantFeatureCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    customer?: CustomerOmit
    admin?: AdminOmit
    oTP?: OTPOmit
    plantCategory?: PlantCategoryOmit
    plantInfo?: PlantInfoOmit
    plantGallery?: PlantGalleryOmit
    plantConditions?: PlantConditionsOmit
    plantCare?: PlantCareOmit
    plantPest?: PlantPestOmit
    plantFeature?: PlantFeatureOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlantCategoryCountOutputType
   */

  export type PlantCategoryCountOutputType = {
    plants: number
  }

  export type PlantCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plants?: boolean | PlantCategoryCountOutputTypeCountPlantsArgs
  }

  // Custom InputTypes
  /**
   * PlantCategoryCountOutputType without action
   */
  export type PlantCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategoryCountOutputType
     */
    select?: PlantCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlantCategoryCountOutputType without action
   */
  export type PlantCategoryCountOutputTypeCountPlantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantInfoWhereInput
  }


  /**
   * Count Type PlantInfoCountOutputType
   */

  export type PlantInfoCountOutputType = {
    galleryImages: number
    pests: number
    features: number
  }

  export type PlantInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    galleryImages?: boolean | PlantInfoCountOutputTypeCountGalleryImagesArgs
    pests?: boolean | PlantInfoCountOutputTypeCountPestsArgs
    features?: boolean | PlantInfoCountOutputTypeCountFeaturesArgs
  }

  // Custom InputTypes
  /**
   * PlantInfoCountOutputType without action
   */
  export type PlantInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfoCountOutputType
     */
    select?: PlantInfoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlantInfoCountOutputType without action
   */
  export type PlantInfoCountOutputTypeCountGalleryImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantGalleryWhereInput
  }

  /**
   * PlantInfoCountOutputType without action
   */
  export type PlantInfoCountOutputTypeCountPestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantPestWhereInput
  }

  /**
   * PlantInfoCountOutputType without action
   */
  export type PlantInfoCountOutputTypeCountFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantFeatureWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    username: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    username: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    username: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    username: string
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | User$customerArgs<ExtArgs>
    admin?: boolean | User$adminArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "username" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | User$customerArgs<ExtArgs>
    admin?: boolean | User$adminArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs> | null
      admin: Prisma.$AdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      username: string
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends User$customerArgs<ExtArgs> = {}>(args?: Subset<T, User$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    admin<T extends User$adminArgs<ExtArgs> = {}>(args?: Subset<T, User$adminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.customer
   */
  export type User$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * User.admin
   */
  export type User$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    phone: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    phone: string
    createdAt: Date
    updatedAt: Date
    userId: number
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>



  export type CustomerSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "phone" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      phone: string
      createdAt: Date
      updatedAt: Date
      userId: number
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'Int'>
    readonly firstName: FieldRef<"Customer", 'String'>
    readonly lastName: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
    readonly userId: FieldRef<"Customer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    address: number
    phone: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    address: string
    phone: string
    createdAt: Date
    updatedAt: Date
    userId: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>



  export type AdminSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "address" | "phone" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      address: string
      phone: string
      createdAt: Date
      updatedAt: Date
      userId: number
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly firstName: FieldRef<"Admin", 'String'>
    readonly lastName: FieldRef<"Admin", 'String'>
    readonly address: FieldRef<"Admin", 'String'>
    readonly phone: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
    readonly userId: FieldRef<"Admin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model OTP
   */

  export type AggregateOTP = {
    _count: OTPCountAggregateOutputType | null
    _min: OTPMinAggregateOutputType | null
    _max: OTPMaxAggregateOutputType | null
  }

  export type OTPMinAggregateOutputType = {
    email: string | null
    otp: string | null
    expiresAt: Date | null
  }

  export type OTPMaxAggregateOutputType = {
    email: string | null
    otp: string | null
    expiresAt: Date | null
  }

  export type OTPCountAggregateOutputType = {
    email: number
    otp: number
    expiresAt: number
    _all: number
  }


  export type OTPMinAggregateInputType = {
    email?: true
    otp?: true
    expiresAt?: true
  }

  export type OTPMaxAggregateInputType = {
    email?: true
    otp?: true
    expiresAt?: true
  }

  export type OTPCountAggregateInputType = {
    email?: true
    otp?: true
    expiresAt?: true
    _all?: true
  }

  export type OTPAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTP to aggregate.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OTPS
    **/
    _count?: true | OTPCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OTPMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OTPMaxAggregateInputType
  }

  export type GetOTPAggregateType<T extends OTPAggregateArgs> = {
        [P in keyof T & keyof AggregateOTP]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOTP[P]>
      : GetScalarType<T[P], AggregateOTP[P]>
  }




  export type OTPGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OTPWhereInput
    orderBy?: OTPOrderByWithAggregationInput | OTPOrderByWithAggregationInput[]
    by: OTPScalarFieldEnum[] | OTPScalarFieldEnum
    having?: OTPScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OTPCountAggregateInputType | true
    _min?: OTPMinAggregateInputType
    _max?: OTPMaxAggregateInputType
  }

  export type OTPGroupByOutputType = {
    email: string
    otp: string
    expiresAt: Date
    _count: OTPCountAggregateOutputType | null
    _min: OTPMinAggregateOutputType | null
    _max: OTPMaxAggregateOutputType | null
  }

  type GetOTPGroupByPayload<T extends OTPGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OTPGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OTPGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OTPGroupByOutputType[P]>
            : GetScalarType<T[P], OTPGroupByOutputType[P]>
        }
      >
    >


  export type OTPSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    email?: boolean
    otp?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["oTP"]>



  export type OTPSelectScalar = {
    email?: boolean
    otp?: boolean
    expiresAt?: boolean
  }

  export type OTPOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"email" | "otp" | "expiresAt", ExtArgs["result"]["oTP"]>

  export type $OTPPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OTP"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      email: string
      otp: string
      expiresAt: Date
    }, ExtArgs["result"]["oTP"]>
    composites: {}
  }

  type OTPGetPayload<S extends boolean | null | undefined | OTPDefaultArgs> = $Result.GetResult<Prisma.$OTPPayload, S>

  type OTPCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OTPFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OTPCountAggregateInputType | true
    }

  export interface OTPDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OTP'], meta: { name: 'OTP' } }
    /**
     * Find zero or one OTP that matches the filter.
     * @param {OTPFindUniqueArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OTPFindUniqueArgs>(args: SelectSubset<T, OTPFindUniqueArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OTP that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OTPFindUniqueOrThrowArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OTPFindUniqueOrThrowArgs>(args: SelectSubset<T, OTPFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OTP that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindFirstArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OTPFindFirstArgs>(args?: SelectSubset<T, OTPFindFirstArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OTP that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindFirstOrThrowArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OTPFindFirstOrThrowArgs>(args?: SelectSubset<T, OTPFindFirstOrThrowArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OTPS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OTPS
     * const oTPS = await prisma.oTP.findMany()
     * 
     * // Get first 10 OTPS
     * const oTPS = await prisma.oTP.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const oTPWithEmailOnly = await prisma.oTP.findMany({ select: { email: true } })
     * 
     */
    findMany<T extends OTPFindManyArgs>(args?: SelectSubset<T, OTPFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OTP.
     * @param {OTPCreateArgs} args - Arguments to create a OTP.
     * @example
     * // Create one OTP
     * const OTP = await prisma.oTP.create({
     *   data: {
     *     // ... data to create a OTP
     *   }
     * })
     * 
     */
    create<T extends OTPCreateArgs>(args: SelectSubset<T, OTPCreateArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OTPS.
     * @param {OTPCreateManyArgs} args - Arguments to create many OTPS.
     * @example
     * // Create many OTPS
     * const oTP = await prisma.oTP.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OTPCreateManyArgs>(args?: SelectSubset<T, OTPCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OTP.
     * @param {OTPDeleteArgs} args - Arguments to delete one OTP.
     * @example
     * // Delete one OTP
     * const OTP = await prisma.oTP.delete({
     *   where: {
     *     // ... filter to delete one OTP
     *   }
     * })
     * 
     */
    delete<T extends OTPDeleteArgs>(args: SelectSubset<T, OTPDeleteArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OTP.
     * @param {OTPUpdateArgs} args - Arguments to update one OTP.
     * @example
     * // Update one OTP
     * const oTP = await prisma.oTP.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OTPUpdateArgs>(args: SelectSubset<T, OTPUpdateArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OTPS.
     * @param {OTPDeleteManyArgs} args - Arguments to filter OTPS to delete.
     * @example
     * // Delete a few OTPS
     * const { count } = await prisma.oTP.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OTPDeleteManyArgs>(args?: SelectSubset<T, OTPDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OTPS
     * const oTP = await prisma.oTP.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OTPUpdateManyArgs>(args: SelectSubset<T, OTPUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OTP.
     * @param {OTPUpsertArgs} args - Arguments to update or create a OTP.
     * @example
     * // Update or create a OTP
     * const oTP = await prisma.oTP.upsert({
     *   create: {
     *     // ... data to create a OTP
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OTP we want to update
     *   }
     * })
     */
    upsert<T extends OTPUpsertArgs>(args: SelectSubset<T, OTPUpsertArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPCountArgs} args - Arguments to filter OTPS to count.
     * @example
     * // Count the number of OTPS
     * const count = await prisma.oTP.count({
     *   where: {
     *     // ... the filter for the OTPS we want to count
     *   }
     * })
    **/
    count<T extends OTPCountArgs>(
      args?: Subset<T, OTPCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OTPCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OTPAggregateArgs>(args: Subset<T, OTPAggregateArgs>): Prisma.PrismaPromise<GetOTPAggregateType<T>>

    /**
     * Group by OTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OTPGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OTPGroupByArgs['orderBy'] }
        : { orderBy?: OTPGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OTPGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOTPGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OTP model
   */
  readonly fields: OTPFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OTP.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OTPClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OTP model
   */
  interface OTPFieldRefs {
    readonly email: FieldRef<"OTP", 'String'>
    readonly otp: FieldRef<"OTP", 'String'>
    readonly expiresAt: FieldRef<"OTP", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OTP findUnique
   */
  export type OTPFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP findUniqueOrThrow
   */
  export type OTPFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP findFirst
   */
  export type OTPFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTPS.
     */
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * OTP findFirstOrThrow
   */
  export type OTPFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTPS.
     */
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * OTP findMany
   */
  export type OTPFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Filter, which OTPS to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * OTP create
   */
  export type OTPCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * The data needed to create a OTP.
     */
    data: XOR<OTPCreateInput, OTPUncheckedCreateInput>
  }

  /**
   * OTP createMany
   */
  export type OTPCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OTPS.
     */
    data: OTPCreateManyInput | OTPCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OTP update
   */
  export type OTPUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * The data needed to update a OTP.
     */
    data: XOR<OTPUpdateInput, OTPUncheckedUpdateInput>
    /**
     * Choose, which OTP to update.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP updateMany
   */
  export type OTPUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OTPS.
     */
    data: XOR<OTPUpdateManyMutationInput, OTPUncheckedUpdateManyInput>
    /**
     * Filter which OTPS to update
     */
    where?: OTPWhereInput
    /**
     * Limit how many OTPS to update.
     */
    limit?: number
  }

  /**
   * OTP upsert
   */
  export type OTPUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * The filter to search for the OTP to update in case it exists.
     */
    where: OTPWhereUniqueInput
    /**
     * In case the OTP found by the `where` argument doesn't exist, create a new OTP with this data.
     */
    create: XOR<OTPCreateInput, OTPUncheckedCreateInput>
    /**
     * In case the OTP was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OTPUpdateInput, OTPUncheckedUpdateInput>
  }

  /**
   * OTP delete
   */
  export type OTPDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Filter which OTP to delete.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP deleteMany
   */
  export type OTPDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTPS to delete
     */
    where?: OTPWhereInput
    /**
     * Limit how many OTPS to delete.
     */
    limit?: number
  }

  /**
   * OTP without action
   */
  export type OTPDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
  }


  /**
   * Model PlantCategory
   */

  export type AggregatePlantCategory = {
    _count: PlantCategoryCountAggregateOutputType | null
    _min: PlantCategoryMinAggregateOutputType | null
    _max: PlantCategoryMaxAggregateOutputType | null
  }

  export type PlantCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlantCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlantCategoryCountAggregateOutputType = {
    id: number
    name: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlantCategoryMinAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlantCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlantCategoryCountAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlantCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantCategory to aggregate.
     */
    where?: PlantCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantCategories to fetch.
     */
    orderBy?: PlantCategoryOrderByWithRelationInput | PlantCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantCategories
    **/
    _count?: true | PlantCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantCategoryMaxAggregateInputType
  }

  export type GetPlantCategoryAggregateType<T extends PlantCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantCategory[P]>
      : GetScalarType<T[P], AggregatePlantCategory[P]>
  }




  export type PlantCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantCategoryWhereInput
    orderBy?: PlantCategoryOrderByWithAggregationInput | PlantCategoryOrderByWithAggregationInput[]
    by: PlantCategoryScalarFieldEnum[] | PlantCategoryScalarFieldEnum
    having?: PlantCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantCategoryCountAggregateInputType | true
    _min?: PlantCategoryMinAggregateInputType
    _max?: PlantCategoryMaxAggregateInputType
  }

  export type PlantCategoryGroupByOutputType = {
    id: string
    name: string
    imageUrl: string
    createdAt: Date
    updatedAt: Date
    _count: PlantCategoryCountAggregateOutputType | null
    _min: PlantCategoryMinAggregateOutputType | null
    _max: PlantCategoryMaxAggregateOutputType | null
  }

  type GetPlantCategoryGroupByPayload<T extends PlantCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], PlantCategoryGroupByOutputType[P]>
        }
      >
    >


  export type PlantCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    plants?: boolean | PlantCategory$plantsArgs<ExtArgs>
    _count?: boolean | PlantCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plantCategory"]>



  export type PlantCategorySelectScalar = {
    id?: boolean
    name?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlantCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "imageUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["plantCategory"]>
  export type PlantCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plants?: boolean | PlantCategory$plantsArgs<ExtArgs>
    _count?: boolean | PlantCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PlantCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlantCategory"
    objects: {
      plants: Prisma.$PlantInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      imageUrl: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["plantCategory"]>
    composites: {}
  }

  type PlantCategoryGetPayload<S extends boolean | null | undefined | PlantCategoryDefaultArgs> = $Result.GetResult<Prisma.$PlantCategoryPayload, S>

  type PlantCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlantCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlantCategoryCountAggregateInputType | true
    }

  export interface PlantCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlantCategory'], meta: { name: 'PlantCategory' } }
    /**
     * Find zero or one PlantCategory that matches the filter.
     * @param {PlantCategoryFindUniqueArgs} args - Arguments to find a PlantCategory
     * @example
     * // Get one PlantCategory
     * const plantCategory = await prisma.plantCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantCategoryFindUniqueArgs>(args: SelectSubset<T, PlantCategoryFindUniqueArgs<ExtArgs>>): Prisma__PlantCategoryClient<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlantCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlantCategoryFindUniqueOrThrowArgs} args - Arguments to find a PlantCategory
     * @example
     * // Get one PlantCategory
     * const plantCategory = await prisma.plantCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantCategoryClient<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCategoryFindFirstArgs} args - Arguments to find a PlantCategory
     * @example
     * // Get one PlantCategory
     * const plantCategory = await prisma.plantCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantCategoryFindFirstArgs>(args?: SelectSubset<T, PlantCategoryFindFirstArgs<ExtArgs>>): Prisma__PlantCategoryClient<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCategoryFindFirstOrThrowArgs} args - Arguments to find a PlantCategory
     * @example
     * // Get one PlantCategory
     * const plantCategory = await prisma.plantCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantCategoryClient<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlantCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantCategories
     * const plantCategories = await prisma.plantCategory.findMany()
     * 
     * // Get first 10 PlantCategories
     * const plantCategories = await prisma.plantCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantCategoryWithIdOnly = await prisma.plantCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantCategoryFindManyArgs>(args?: SelectSubset<T, PlantCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlantCategory.
     * @param {PlantCategoryCreateArgs} args - Arguments to create a PlantCategory.
     * @example
     * // Create one PlantCategory
     * const PlantCategory = await prisma.plantCategory.create({
     *   data: {
     *     // ... data to create a PlantCategory
     *   }
     * })
     * 
     */
    create<T extends PlantCategoryCreateArgs>(args: SelectSubset<T, PlantCategoryCreateArgs<ExtArgs>>): Prisma__PlantCategoryClient<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlantCategories.
     * @param {PlantCategoryCreateManyArgs} args - Arguments to create many PlantCategories.
     * @example
     * // Create many PlantCategories
     * const plantCategory = await prisma.plantCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantCategoryCreateManyArgs>(args?: SelectSubset<T, PlantCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlantCategory.
     * @param {PlantCategoryDeleteArgs} args - Arguments to delete one PlantCategory.
     * @example
     * // Delete one PlantCategory
     * const PlantCategory = await prisma.plantCategory.delete({
     *   where: {
     *     // ... filter to delete one PlantCategory
     *   }
     * })
     * 
     */
    delete<T extends PlantCategoryDeleteArgs>(args: SelectSubset<T, PlantCategoryDeleteArgs<ExtArgs>>): Prisma__PlantCategoryClient<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlantCategory.
     * @param {PlantCategoryUpdateArgs} args - Arguments to update one PlantCategory.
     * @example
     * // Update one PlantCategory
     * const plantCategory = await prisma.plantCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantCategoryUpdateArgs>(args: SelectSubset<T, PlantCategoryUpdateArgs<ExtArgs>>): Prisma__PlantCategoryClient<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlantCategories.
     * @param {PlantCategoryDeleteManyArgs} args - Arguments to filter PlantCategories to delete.
     * @example
     * // Delete a few PlantCategories
     * const { count } = await prisma.plantCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantCategoryDeleteManyArgs>(args?: SelectSubset<T, PlantCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantCategories
     * const plantCategory = await prisma.plantCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantCategoryUpdateManyArgs>(args: SelectSubset<T, PlantCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantCategory.
     * @param {PlantCategoryUpsertArgs} args - Arguments to update or create a PlantCategory.
     * @example
     * // Update or create a PlantCategory
     * const plantCategory = await prisma.plantCategory.upsert({
     *   create: {
     *     // ... data to create a PlantCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantCategory we want to update
     *   }
     * })
     */
    upsert<T extends PlantCategoryUpsertArgs>(args: SelectSubset<T, PlantCategoryUpsertArgs<ExtArgs>>): Prisma__PlantCategoryClient<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlantCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCategoryCountArgs} args - Arguments to filter PlantCategories to count.
     * @example
     * // Count the number of PlantCategories
     * const count = await prisma.plantCategory.count({
     *   where: {
     *     // ... the filter for the PlantCategories we want to count
     *   }
     * })
    **/
    count<T extends PlantCategoryCountArgs>(
      args?: Subset<T, PlantCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantCategoryAggregateArgs>(args: Subset<T, PlantCategoryAggregateArgs>): Prisma.PrismaPromise<GetPlantCategoryAggregateType<T>>

    /**
     * Group by PlantCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantCategoryGroupByArgs['orderBy'] }
        : { orderBy?: PlantCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlantCategory model
   */
  readonly fields: PlantCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plants<T extends PlantCategory$plantsArgs<ExtArgs> = {}>(args?: Subset<T, PlantCategory$plantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlantCategory model
   */
  interface PlantCategoryFieldRefs {
    readonly id: FieldRef<"PlantCategory", 'String'>
    readonly name: FieldRef<"PlantCategory", 'String'>
    readonly imageUrl: FieldRef<"PlantCategory", 'String'>
    readonly createdAt: FieldRef<"PlantCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"PlantCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlantCategory findUnique
   */
  export type PlantCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PlantCategory to fetch.
     */
    where: PlantCategoryWhereUniqueInput
  }

  /**
   * PlantCategory findUniqueOrThrow
   */
  export type PlantCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PlantCategory to fetch.
     */
    where: PlantCategoryWhereUniqueInput
  }

  /**
   * PlantCategory findFirst
   */
  export type PlantCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PlantCategory to fetch.
     */
    where?: PlantCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantCategories to fetch.
     */
    orderBy?: PlantCategoryOrderByWithRelationInput | PlantCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantCategories.
     */
    cursor?: PlantCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantCategories.
     */
    distinct?: PlantCategoryScalarFieldEnum | PlantCategoryScalarFieldEnum[]
  }

  /**
   * PlantCategory findFirstOrThrow
   */
  export type PlantCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PlantCategory to fetch.
     */
    where?: PlantCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantCategories to fetch.
     */
    orderBy?: PlantCategoryOrderByWithRelationInput | PlantCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantCategories.
     */
    cursor?: PlantCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantCategories.
     */
    distinct?: PlantCategoryScalarFieldEnum | PlantCategoryScalarFieldEnum[]
  }

  /**
   * PlantCategory findMany
   */
  export type PlantCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PlantCategories to fetch.
     */
    where?: PlantCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantCategories to fetch.
     */
    orderBy?: PlantCategoryOrderByWithRelationInput | PlantCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantCategories.
     */
    cursor?: PlantCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantCategories.
     */
    skip?: number
    distinct?: PlantCategoryScalarFieldEnum | PlantCategoryScalarFieldEnum[]
  }

  /**
   * PlantCategory create
   */
  export type PlantCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PlantCategory.
     */
    data: XOR<PlantCategoryCreateInput, PlantCategoryUncheckedCreateInput>
  }

  /**
   * PlantCategory createMany
   */
  export type PlantCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlantCategories.
     */
    data: PlantCategoryCreateManyInput | PlantCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlantCategory update
   */
  export type PlantCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PlantCategory.
     */
    data: XOR<PlantCategoryUpdateInput, PlantCategoryUncheckedUpdateInput>
    /**
     * Choose, which PlantCategory to update.
     */
    where: PlantCategoryWhereUniqueInput
  }

  /**
   * PlantCategory updateMany
   */
  export type PlantCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlantCategories.
     */
    data: XOR<PlantCategoryUpdateManyMutationInput, PlantCategoryUncheckedUpdateManyInput>
    /**
     * Filter which PlantCategories to update
     */
    where?: PlantCategoryWhereInput
    /**
     * Limit how many PlantCategories to update.
     */
    limit?: number
  }

  /**
   * PlantCategory upsert
   */
  export type PlantCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PlantCategory to update in case it exists.
     */
    where: PlantCategoryWhereUniqueInput
    /**
     * In case the PlantCategory found by the `where` argument doesn't exist, create a new PlantCategory with this data.
     */
    create: XOR<PlantCategoryCreateInput, PlantCategoryUncheckedCreateInput>
    /**
     * In case the PlantCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantCategoryUpdateInput, PlantCategoryUncheckedUpdateInput>
  }

  /**
   * PlantCategory delete
   */
  export type PlantCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
    /**
     * Filter which PlantCategory to delete.
     */
    where: PlantCategoryWhereUniqueInput
  }

  /**
   * PlantCategory deleteMany
   */
  export type PlantCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantCategories to delete
     */
    where?: PlantCategoryWhereInput
    /**
     * Limit how many PlantCategories to delete.
     */
    limit?: number
  }

  /**
   * PlantCategory.plants
   */
  export type PlantCategory$plantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    where?: PlantInfoWhereInput
    orderBy?: PlantInfoOrderByWithRelationInput | PlantInfoOrderByWithRelationInput[]
    cursor?: PlantInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlantInfoScalarFieldEnum | PlantInfoScalarFieldEnum[]
  }

  /**
   * PlantCategory without action
   */
  export type PlantCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCategory
     */
    select?: PlantCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCategory
     */
    omit?: PlantCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCategoryInclude<ExtArgs> | null
  }


  /**
   * Model PlantInfo
   */

  export type AggregatePlantInfo = {
    _count: PlantInfoCountAggregateOutputType | null
    _min: PlantInfoMinAggregateOutputType | null
    _max: PlantInfoMaxAggregateOutputType | null
  }

  export type PlantInfoMinAggregateOutputType = {
    id: string | null
    name: string | null
    scientificName: string | null
    genus: string | null
    imageUrl: string | null
    description: string | null
    categoryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlantInfoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    scientificName: string | null
    genus: string | null
    imageUrl: string | null
    description: string | null
    categoryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlantInfoCountAggregateOutputType = {
    id: number
    name: number
    scientificName: number
    genus: number
    imageUrl: number
    description: number
    categoryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlantInfoMinAggregateInputType = {
    id?: true
    name?: true
    scientificName?: true
    genus?: true
    imageUrl?: true
    description?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlantInfoMaxAggregateInputType = {
    id?: true
    name?: true
    scientificName?: true
    genus?: true
    imageUrl?: true
    description?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlantInfoCountAggregateInputType = {
    id?: true
    name?: true
    scientificName?: true
    genus?: true
    imageUrl?: true
    description?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlantInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantInfo to aggregate.
     */
    where?: PlantInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantInfos to fetch.
     */
    orderBy?: PlantInfoOrderByWithRelationInput | PlantInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantInfos
    **/
    _count?: true | PlantInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantInfoMaxAggregateInputType
  }

  export type GetPlantInfoAggregateType<T extends PlantInfoAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantInfo[P]>
      : GetScalarType<T[P], AggregatePlantInfo[P]>
  }




  export type PlantInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantInfoWhereInput
    orderBy?: PlantInfoOrderByWithAggregationInput | PlantInfoOrderByWithAggregationInput[]
    by: PlantInfoScalarFieldEnum[] | PlantInfoScalarFieldEnum
    having?: PlantInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantInfoCountAggregateInputType | true
    _min?: PlantInfoMinAggregateInputType
    _max?: PlantInfoMaxAggregateInputType
  }

  export type PlantInfoGroupByOutputType = {
    id: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    categoryId: string
    createdAt: Date
    updatedAt: Date
    _count: PlantInfoCountAggregateOutputType | null
    _min: PlantInfoMinAggregateOutputType | null
    _max: PlantInfoMaxAggregateOutputType | null
  }

  type GetPlantInfoGroupByPayload<T extends PlantInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantInfoGroupByOutputType[P]>
            : GetScalarType<T[P], PlantInfoGroupByOutputType[P]>
        }
      >
    >


  export type PlantInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    scientificName?: boolean
    genus?: boolean
    imageUrl?: boolean
    description?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | PlantCategoryDefaultArgs<ExtArgs>
    galleryImages?: boolean | PlantInfo$galleryImagesArgs<ExtArgs>
    conditions?: boolean | PlantInfo$conditionsArgs<ExtArgs>
    careInstructions?: boolean | PlantInfo$careInstructionsArgs<ExtArgs>
    pests?: boolean | PlantInfo$pestsArgs<ExtArgs>
    features?: boolean | PlantInfo$featuresArgs<ExtArgs>
    _count?: boolean | PlantInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plantInfo"]>



  export type PlantInfoSelectScalar = {
    id?: boolean
    name?: boolean
    scientificName?: boolean
    genus?: boolean
    imageUrl?: boolean
    description?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlantInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "scientificName" | "genus" | "imageUrl" | "description" | "categoryId" | "createdAt" | "updatedAt", ExtArgs["result"]["plantInfo"]>
  export type PlantInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | PlantCategoryDefaultArgs<ExtArgs>
    galleryImages?: boolean | PlantInfo$galleryImagesArgs<ExtArgs>
    conditions?: boolean | PlantInfo$conditionsArgs<ExtArgs>
    careInstructions?: boolean | PlantInfo$careInstructionsArgs<ExtArgs>
    pests?: boolean | PlantInfo$pestsArgs<ExtArgs>
    features?: boolean | PlantInfo$featuresArgs<ExtArgs>
    _count?: boolean | PlantInfoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PlantInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlantInfo"
    objects: {
      category: Prisma.$PlantCategoryPayload<ExtArgs>
      galleryImages: Prisma.$PlantGalleryPayload<ExtArgs>[]
      conditions: Prisma.$PlantConditionsPayload<ExtArgs> | null
      careInstructions: Prisma.$PlantCarePayload<ExtArgs> | null
      pests: Prisma.$PlantPestPayload<ExtArgs>[]
      features: Prisma.$PlantFeaturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      scientificName: string
      genus: string
      imageUrl: string
      description: string
      categoryId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["plantInfo"]>
    composites: {}
  }

  type PlantInfoGetPayload<S extends boolean | null | undefined | PlantInfoDefaultArgs> = $Result.GetResult<Prisma.$PlantInfoPayload, S>

  type PlantInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlantInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlantInfoCountAggregateInputType | true
    }

  export interface PlantInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlantInfo'], meta: { name: 'PlantInfo' } }
    /**
     * Find zero or one PlantInfo that matches the filter.
     * @param {PlantInfoFindUniqueArgs} args - Arguments to find a PlantInfo
     * @example
     * // Get one PlantInfo
     * const plantInfo = await prisma.plantInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantInfoFindUniqueArgs>(args: SelectSubset<T, PlantInfoFindUniqueArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlantInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlantInfoFindUniqueOrThrowArgs} args - Arguments to find a PlantInfo
     * @example
     * // Get one PlantInfo
     * const plantInfo = await prisma.plantInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantInfoFindFirstArgs} args - Arguments to find a PlantInfo
     * @example
     * // Get one PlantInfo
     * const plantInfo = await prisma.plantInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantInfoFindFirstArgs>(args?: SelectSubset<T, PlantInfoFindFirstArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantInfoFindFirstOrThrowArgs} args - Arguments to find a PlantInfo
     * @example
     * // Get one PlantInfo
     * const plantInfo = await prisma.plantInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlantInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantInfos
     * const plantInfos = await prisma.plantInfo.findMany()
     * 
     * // Get first 10 PlantInfos
     * const plantInfos = await prisma.plantInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantInfoWithIdOnly = await prisma.plantInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantInfoFindManyArgs>(args?: SelectSubset<T, PlantInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlantInfo.
     * @param {PlantInfoCreateArgs} args - Arguments to create a PlantInfo.
     * @example
     * // Create one PlantInfo
     * const PlantInfo = await prisma.plantInfo.create({
     *   data: {
     *     // ... data to create a PlantInfo
     *   }
     * })
     * 
     */
    create<T extends PlantInfoCreateArgs>(args: SelectSubset<T, PlantInfoCreateArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlantInfos.
     * @param {PlantInfoCreateManyArgs} args - Arguments to create many PlantInfos.
     * @example
     * // Create many PlantInfos
     * const plantInfo = await prisma.plantInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantInfoCreateManyArgs>(args?: SelectSubset<T, PlantInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlantInfo.
     * @param {PlantInfoDeleteArgs} args - Arguments to delete one PlantInfo.
     * @example
     * // Delete one PlantInfo
     * const PlantInfo = await prisma.plantInfo.delete({
     *   where: {
     *     // ... filter to delete one PlantInfo
     *   }
     * })
     * 
     */
    delete<T extends PlantInfoDeleteArgs>(args: SelectSubset<T, PlantInfoDeleteArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlantInfo.
     * @param {PlantInfoUpdateArgs} args - Arguments to update one PlantInfo.
     * @example
     * // Update one PlantInfo
     * const plantInfo = await prisma.plantInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantInfoUpdateArgs>(args: SelectSubset<T, PlantInfoUpdateArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlantInfos.
     * @param {PlantInfoDeleteManyArgs} args - Arguments to filter PlantInfos to delete.
     * @example
     * // Delete a few PlantInfos
     * const { count } = await prisma.plantInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantInfoDeleteManyArgs>(args?: SelectSubset<T, PlantInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantInfos
     * const plantInfo = await prisma.plantInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantInfoUpdateManyArgs>(args: SelectSubset<T, PlantInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantInfo.
     * @param {PlantInfoUpsertArgs} args - Arguments to update or create a PlantInfo.
     * @example
     * // Update or create a PlantInfo
     * const plantInfo = await prisma.plantInfo.upsert({
     *   create: {
     *     // ... data to create a PlantInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantInfo we want to update
     *   }
     * })
     */
    upsert<T extends PlantInfoUpsertArgs>(args: SelectSubset<T, PlantInfoUpsertArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlantInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantInfoCountArgs} args - Arguments to filter PlantInfos to count.
     * @example
     * // Count the number of PlantInfos
     * const count = await prisma.plantInfo.count({
     *   where: {
     *     // ... the filter for the PlantInfos we want to count
     *   }
     * })
    **/
    count<T extends PlantInfoCountArgs>(
      args?: Subset<T, PlantInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantInfoAggregateArgs>(args: Subset<T, PlantInfoAggregateArgs>): Prisma.PrismaPromise<GetPlantInfoAggregateType<T>>

    /**
     * Group by PlantInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantInfoGroupByArgs['orderBy'] }
        : { orderBy?: PlantInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlantInfo model
   */
  readonly fields: PlantInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends PlantCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantCategoryDefaultArgs<ExtArgs>>): Prisma__PlantCategoryClient<$Result.GetResult<Prisma.$PlantCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    galleryImages<T extends PlantInfo$galleryImagesArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfo$galleryImagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    conditions<T extends PlantInfo$conditionsArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfo$conditionsArgs<ExtArgs>>): Prisma__PlantConditionsClient<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    careInstructions<T extends PlantInfo$careInstructionsArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfo$careInstructionsArgs<ExtArgs>>): Prisma__PlantCareClient<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    pests<T extends PlantInfo$pestsArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfo$pestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    features<T extends PlantInfo$featuresArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfo$featuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlantInfo model
   */
  interface PlantInfoFieldRefs {
    readonly id: FieldRef<"PlantInfo", 'String'>
    readonly name: FieldRef<"PlantInfo", 'String'>
    readonly scientificName: FieldRef<"PlantInfo", 'String'>
    readonly genus: FieldRef<"PlantInfo", 'String'>
    readonly imageUrl: FieldRef<"PlantInfo", 'String'>
    readonly description: FieldRef<"PlantInfo", 'String'>
    readonly categoryId: FieldRef<"PlantInfo", 'String'>
    readonly createdAt: FieldRef<"PlantInfo", 'DateTime'>
    readonly updatedAt: FieldRef<"PlantInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlantInfo findUnique
   */
  export type PlantInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    /**
     * Filter, which PlantInfo to fetch.
     */
    where: PlantInfoWhereUniqueInput
  }

  /**
   * PlantInfo findUniqueOrThrow
   */
  export type PlantInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    /**
     * Filter, which PlantInfo to fetch.
     */
    where: PlantInfoWhereUniqueInput
  }

  /**
   * PlantInfo findFirst
   */
  export type PlantInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    /**
     * Filter, which PlantInfo to fetch.
     */
    where?: PlantInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantInfos to fetch.
     */
    orderBy?: PlantInfoOrderByWithRelationInput | PlantInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantInfos.
     */
    cursor?: PlantInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantInfos.
     */
    distinct?: PlantInfoScalarFieldEnum | PlantInfoScalarFieldEnum[]
  }

  /**
   * PlantInfo findFirstOrThrow
   */
  export type PlantInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    /**
     * Filter, which PlantInfo to fetch.
     */
    where?: PlantInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantInfos to fetch.
     */
    orderBy?: PlantInfoOrderByWithRelationInput | PlantInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantInfos.
     */
    cursor?: PlantInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantInfos.
     */
    distinct?: PlantInfoScalarFieldEnum | PlantInfoScalarFieldEnum[]
  }

  /**
   * PlantInfo findMany
   */
  export type PlantInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    /**
     * Filter, which PlantInfos to fetch.
     */
    where?: PlantInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantInfos to fetch.
     */
    orderBy?: PlantInfoOrderByWithRelationInput | PlantInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantInfos.
     */
    cursor?: PlantInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantInfos.
     */
    skip?: number
    distinct?: PlantInfoScalarFieldEnum | PlantInfoScalarFieldEnum[]
  }

  /**
   * PlantInfo create
   */
  export type PlantInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a PlantInfo.
     */
    data: XOR<PlantInfoCreateInput, PlantInfoUncheckedCreateInput>
  }

  /**
   * PlantInfo createMany
   */
  export type PlantInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlantInfos.
     */
    data: PlantInfoCreateManyInput | PlantInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlantInfo update
   */
  export type PlantInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a PlantInfo.
     */
    data: XOR<PlantInfoUpdateInput, PlantInfoUncheckedUpdateInput>
    /**
     * Choose, which PlantInfo to update.
     */
    where: PlantInfoWhereUniqueInput
  }

  /**
   * PlantInfo updateMany
   */
  export type PlantInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlantInfos.
     */
    data: XOR<PlantInfoUpdateManyMutationInput, PlantInfoUncheckedUpdateManyInput>
    /**
     * Filter which PlantInfos to update
     */
    where?: PlantInfoWhereInput
    /**
     * Limit how many PlantInfos to update.
     */
    limit?: number
  }

  /**
   * PlantInfo upsert
   */
  export type PlantInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the PlantInfo to update in case it exists.
     */
    where: PlantInfoWhereUniqueInput
    /**
     * In case the PlantInfo found by the `where` argument doesn't exist, create a new PlantInfo with this data.
     */
    create: XOR<PlantInfoCreateInput, PlantInfoUncheckedCreateInput>
    /**
     * In case the PlantInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantInfoUpdateInput, PlantInfoUncheckedUpdateInput>
  }

  /**
   * PlantInfo delete
   */
  export type PlantInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
    /**
     * Filter which PlantInfo to delete.
     */
    where: PlantInfoWhereUniqueInput
  }

  /**
   * PlantInfo deleteMany
   */
  export type PlantInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantInfos to delete
     */
    where?: PlantInfoWhereInput
    /**
     * Limit how many PlantInfos to delete.
     */
    limit?: number
  }

  /**
   * PlantInfo.galleryImages
   */
  export type PlantInfo$galleryImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    where?: PlantGalleryWhereInput
    orderBy?: PlantGalleryOrderByWithRelationInput | PlantGalleryOrderByWithRelationInput[]
    cursor?: PlantGalleryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlantGalleryScalarFieldEnum | PlantGalleryScalarFieldEnum[]
  }

  /**
   * PlantInfo.conditions
   */
  export type PlantInfo$conditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    where?: PlantConditionsWhereInput
  }

  /**
   * PlantInfo.careInstructions
   */
  export type PlantInfo$careInstructionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    where?: PlantCareWhereInput
  }

  /**
   * PlantInfo.pests
   */
  export type PlantInfo$pestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    where?: PlantPestWhereInput
    orderBy?: PlantPestOrderByWithRelationInput | PlantPestOrderByWithRelationInput[]
    cursor?: PlantPestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlantPestScalarFieldEnum | PlantPestScalarFieldEnum[]
  }

  /**
   * PlantInfo.features
   */
  export type PlantInfo$featuresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    where?: PlantFeatureWhereInput
    orderBy?: PlantFeatureOrderByWithRelationInput | PlantFeatureOrderByWithRelationInput[]
    cursor?: PlantFeatureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlantFeatureScalarFieldEnum | PlantFeatureScalarFieldEnum[]
  }

  /**
   * PlantInfo without action
   */
  export type PlantInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantInfo
     */
    select?: PlantInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantInfo
     */
    omit?: PlantInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInfoInclude<ExtArgs> | null
  }


  /**
   * Model PlantGallery
   */

  export type AggregatePlantGallery = {
    _count: PlantGalleryCountAggregateOutputType | null
    _min: PlantGalleryMinAggregateOutputType | null
    _max: PlantGalleryMaxAggregateOutputType | null
  }

  export type PlantGalleryMinAggregateOutputType = {
    id: string | null
    imageUrl: string | null
    plantId: string | null
  }

  export type PlantGalleryMaxAggregateOutputType = {
    id: string | null
    imageUrl: string | null
    plantId: string | null
  }

  export type PlantGalleryCountAggregateOutputType = {
    id: number
    imageUrl: number
    plantId: number
    _all: number
  }


  export type PlantGalleryMinAggregateInputType = {
    id?: true
    imageUrl?: true
    plantId?: true
  }

  export type PlantGalleryMaxAggregateInputType = {
    id?: true
    imageUrl?: true
    plantId?: true
  }

  export type PlantGalleryCountAggregateInputType = {
    id?: true
    imageUrl?: true
    plantId?: true
    _all?: true
  }

  export type PlantGalleryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantGallery to aggregate.
     */
    where?: PlantGalleryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantGalleries to fetch.
     */
    orderBy?: PlantGalleryOrderByWithRelationInput | PlantGalleryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantGalleryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantGalleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantGalleries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantGalleries
    **/
    _count?: true | PlantGalleryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantGalleryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantGalleryMaxAggregateInputType
  }

  export type GetPlantGalleryAggregateType<T extends PlantGalleryAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantGallery]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantGallery[P]>
      : GetScalarType<T[P], AggregatePlantGallery[P]>
  }




  export type PlantGalleryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantGalleryWhereInput
    orderBy?: PlantGalleryOrderByWithAggregationInput | PlantGalleryOrderByWithAggregationInput[]
    by: PlantGalleryScalarFieldEnum[] | PlantGalleryScalarFieldEnum
    having?: PlantGalleryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantGalleryCountAggregateInputType | true
    _min?: PlantGalleryMinAggregateInputType
    _max?: PlantGalleryMaxAggregateInputType
  }

  export type PlantGalleryGroupByOutputType = {
    id: string
    imageUrl: string
    plantId: string
    _count: PlantGalleryCountAggregateOutputType | null
    _min: PlantGalleryMinAggregateOutputType | null
    _max: PlantGalleryMaxAggregateOutputType | null
  }

  type GetPlantGalleryGroupByPayload<T extends PlantGalleryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantGalleryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantGalleryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantGalleryGroupByOutputType[P]>
            : GetScalarType<T[P], PlantGalleryGroupByOutputType[P]>
        }
      >
    >


  export type PlantGallerySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    plantId?: boolean
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plantGallery"]>



  export type PlantGallerySelectScalar = {
    id?: boolean
    imageUrl?: boolean
    plantId?: boolean
  }

  export type PlantGalleryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "imageUrl" | "plantId", ExtArgs["result"]["plantGallery"]>
  export type PlantGalleryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }

  export type $PlantGalleryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlantGallery"
    objects: {
      plant: Prisma.$PlantInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      imageUrl: string
      plantId: string
    }, ExtArgs["result"]["plantGallery"]>
    composites: {}
  }

  type PlantGalleryGetPayload<S extends boolean | null | undefined | PlantGalleryDefaultArgs> = $Result.GetResult<Prisma.$PlantGalleryPayload, S>

  type PlantGalleryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlantGalleryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlantGalleryCountAggregateInputType | true
    }

  export interface PlantGalleryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlantGallery'], meta: { name: 'PlantGallery' } }
    /**
     * Find zero or one PlantGallery that matches the filter.
     * @param {PlantGalleryFindUniqueArgs} args - Arguments to find a PlantGallery
     * @example
     * // Get one PlantGallery
     * const plantGallery = await prisma.plantGallery.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantGalleryFindUniqueArgs>(args: SelectSubset<T, PlantGalleryFindUniqueArgs<ExtArgs>>): Prisma__PlantGalleryClient<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlantGallery that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlantGalleryFindUniqueOrThrowArgs} args - Arguments to find a PlantGallery
     * @example
     * // Get one PlantGallery
     * const plantGallery = await prisma.plantGallery.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantGalleryFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantGalleryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantGalleryClient<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantGallery that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGalleryFindFirstArgs} args - Arguments to find a PlantGallery
     * @example
     * // Get one PlantGallery
     * const plantGallery = await prisma.plantGallery.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantGalleryFindFirstArgs>(args?: SelectSubset<T, PlantGalleryFindFirstArgs<ExtArgs>>): Prisma__PlantGalleryClient<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantGallery that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGalleryFindFirstOrThrowArgs} args - Arguments to find a PlantGallery
     * @example
     * // Get one PlantGallery
     * const plantGallery = await prisma.plantGallery.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantGalleryFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantGalleryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantGalleryClient<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlantGalleries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGalleryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantGalleries
     * const plantGalleries = await prisma.plantGallery.findMany()
     * 
     * // Get first 10 PlantGalleries
     * const plantGalleries = await prisma.plantGallery.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantGalleryWithIdOnly = await prisma.plantGallery.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantGalleryFindManyArgs>(args?: SelectSubset<T, PlantGalleryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlantGallery.
     * @param {PlantGalleryCreateArgs} args - Arguments to create a PlantGallery.
     * @example
     * // Create one PlantGallery
     * const PlantGallery = await prisma.plantGallery.create({
     *   data: {
     *     // ... data to create a PlantGallery
     *   }
     * })
     * 
     */
    create<T extends PlantGalleryCreateArgs>(args: SelectSubset<T, PlantGalleryCreateArgs<ExtArgs>>): Prisma__PlantGalleryClient<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlantGalleries.
     * @param {PlantGalleryCreateManyArgs} args - Arguments to create many PlantGalleries.
     * @example
     * // Create many PlantGalleries
     * const plantGallery = await prisma.plantGallery.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantGalleryCreateManyArgs>(args?: SelectSubset<T, PlantGalleryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlantGallery.
     * @param {PlantGalleryDeleteArgs} args - Arguments to delete one PlantGallery.
     * @example
     * // Delete one PlantGallery
     * const PlantGallery = await prisma.plantGallery.delete({
     *   where: {
     *     // ... filter to delete one PlantGallery
     *   }
     * })
     * 
     */
    delete<T extends PlantGalleryDeleteArgs>(args: SelectSubset<T, PlantGalleryDeleteArgs<ExtArgs>>): Prisma__PlantGalleryClient<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlantGallery.
     * @param {PlantGalleryUpdateArgs} args - Arguments to update one PlantGallery.
     * @example
     * // Update one PlantGallery
     * const plantGallery = await prisma.plantGallery.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantGalleryUpdateArgs>(args: SelectSubset<T, PlantGalleryUpdateArgs<ExtArgs>>): Prisma__PlantGalleryClient<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlantGalleries.
     * @param {PlantGalleryDeleteManyArgs} args - Arguments to filter PlantGalleries to delete.
     * @example
     * // Delete a few PlantGalleries
     * const { count } = await prisma.plantGallery.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantGalleryDeleteManyArgs>(args?: SelectSubset<T, PlantGalleryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantGalleries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGalleryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantGalleries
     * const plantGallery = await prisma.plantGallery.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantGalleryUpdateManyArgs>(args: SelectSubset<T, PlantGalleryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantGallery.
     * @param {PlantGalleryUpsertArgs} args - Arguments to update or create a PlantGallery.
     * @example
     * // Update or create a PlantGallery
     * const plantGallery = await prisma.plantGallery.upsert({
     *   create: {
     *     // ... data to create a PlantGallery
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantGallery we want to update
     *   }
     * })
     */
    upsert<T extends PlantGalleryUpsertArgs>(args: SelectSubset<T, PlantGalleryUpsertArgs<ExtArgs>>): Prisma__PlantGalleryClient<$Result.GetResult<Prisma.$PlantGalleryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlantGalleries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGalleryCountArgs} args - Arguments to filter PlantGalleries to count.
     * @example
     * // Count the number of PlantGalleries
     * const count = await prisma.plantGallery.count({
     *   where: {
     *     // ... the filter for the PlantGalleries we want to count
     *   }
     * })
    **/
    count<T extends PlantGalleryCountArgs>(
      args?: Subset<T, PlantGalleryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantGalleryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantGallery.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGalleryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantGalleryAggregateArgs>(args: Subset<T, PlantGalleryAggregateArgs>): Prisma.PrismaPromise<GetPlantGalleryAggregateType<T>>

    /**
     * Group by PlantGallery.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGalleryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantGalleryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantGalleryGroupByArgs['orderBy'] }
        : { orderBy?: PlantGalleryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantGalleryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantGalleryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlantGallery model
   */
  readonly fields: PlantGalleryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantGallery.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantGalleryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends PlantInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfoDefaultArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlantGallery model
   */
  interface PlantGalleryFieldRefs {
    readonly id: FieldRef<"PlantGallery", 'String'>
    readonly imageUrl: FieldRef<"PlantGallery", 'String'>
    readonly plantId: FieldRef<"PlantGallery", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlantGallery findUnique
   */
  export type PlantGalleryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    /**
     * Filter, which PlantGallery to fetch.
     */
    where: PlantGalleryWhereUniqueInput
  }

  /**
   * PlantGallery findUniqueOrThrow
   */
  export type PlantGalleryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    /**
     * Filter, which PlantGallery to fetch.
     */
    where: PlantGalleryWhereUniqueInput
  }

  /**
   * PlantGallery findFirst
   */
  export type PlantGalleryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    /**
     * Filter, which PlantGallery to fetch.
     */
    where?: PlantGalleryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantGalleries to fetch.
     */
    orderBy?: PlantGalleryOrderByWithRelationInput | PlantGalleryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantGalleries.
     */
    cursor?: PlantGalleryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantGalleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantGalleries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantGalleries.
     */
    distinct?: PlantGalleryScalarFieldEnum | PlantGalleryScalarFieldEnum[]
  }

  /**
   * PlantGallery findFirstOrThrow
   */
  export type PlantGalleryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    /**
     * Filter, which PlantGallery to fetch.
     */
    where?: PlantGalleryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantGalleries to fetch.
     */
    orderBy?: PlantGalleryOrderByWithRelationInput | PlantGalleryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantGalleries.
     */
    cursor?: PlantGalleryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantGalleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantGalleries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantGalleries.
     */
    distinct?: PlantGalleryScalarFieldEnum | PlantGalleryScalarFieldEnum[]
  }

  /**
   * PlantGallery findMany
   */
  export type PlantGalleryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    /**
     * Filter, which PlantGalleries to fetch.
     */
    where?: PlantGalleryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantGalleries to fetch.
     */
    orderBy?: PlantGalleryOrderByWithRelationInput | PlantGalleryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantGalleries.
     */
    cursor?: PlantGalleryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantGalleries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantGalleries.
     */
    skip?: number
    distinct?: PlantGalleryScalarFieldEnum | PlantGalleryScalarFieldEnum[]
  }

  /**
   * PlantGallery create
   */
  export type PlantGalleryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    /**
     * The data needed to create a PlantGallery.
     */
    data: XOR<PlantGalleryCreateInput, PlantGalleryUncheckedCreateInput>
  }

  /**
   * PlantGallery createMany
   */
  export type PlantGalleryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlantGalleries.
     */
    data: PlantGalleryCreateManyInput | PlantGalleryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlantGallery update
   */
  export type PlantGalleryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    /**
     * The data needed to update a PlantGallery.
     */
    data: XOR<PlantGalleryUpdateInput, PlantGalleryUncheckedUpdateInput>
    /**
     * Choose, which PlantGallery to update.
     */
    where: PlantGalleryWhereUniqueInput
  }

  /**
   * PlantGallery updateMany
   */
  export type PlantGalleryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlantGalleries.
     */
    data: XOR<PlantGalleryUpdateManyMutationInput, PlantGalleryUncheckedUpdateManyInput>
    /**
     * Filter which PlantGalleries to update
     */
    where?: PlantGalleryWhereInput
    /**
     * Limit how many PlantGalleries to update.
     */
    limit?: number
  }

  /**
   * PlantGallery upsert
   */
  export type PlantGalleryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    /**
     * The filter to search for the PlantGallery to update in case it exists.
     */
    where: PlantGalleryWhereUniqueInput
    /**
     * In case the PlantGallery found by the `where` argument doesn't exist, create a new PlantGallery with this data.
     */
    create: XOR<PlantGalleryCreateInput, PlantGalleryUncheckedCreateInput>
    /**
     * In case the PlantGallery was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantGalleryUpdateInput, PlantGalleryUncheckedUpdateInput>
  }

  /**
   * PlantGallery delete
   */
  export type PlantGalleryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
    /**
     * Filter which PlantGallery to delete.
     */
    where: PlantGalleryWhereUniqueInput
  }

  /**
   * PlantGallery deleteMany
   */
  export type PlantGalleryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantGalleries to delete
     */
    where?: PlantGalleryWhereInput
    /**
     * Limit how many PlantGalleries to delete.
     */
    limit?: number
  }

  /**
   * PlantGallery without action
   */
  export type PlantGalleryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGallery
     */
    select?: PlantGallerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGallery
     */
    omit?: PlantGalleryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGalleryInclude<ExtArgs> | null
  }


  /**
   * Model PlantConditions
   */

  export type AggregatePlantConditions = {
    _count: PlantConditionsCountAggregateOutputType | null
    _min: PlantConditionsMinAggregateOutputType | null
    _max: PlantConditionsMaxAggregateOutputType | null
  }

  export type PlantConditionsMinAggregateOutputType = {
    id: string | null
    temperature: string | null
    sunlight: string | null
    hardinessZone: string | null
    soil: string | null
    growthRate: string | null
    caution: string | null
    plantId: string | null
  }

  export type PlantConditionsMaxAggregateOutputType = {
    id: string | null
    temperature: string | null
    sunlight: string | null
    hardinessZone: string | null
    soil: string | null
    growthRate: string | null
    caution: string | null
    plantId: string | null
  }

  export type PlantConditionsCountAggregateOutputType = {
    id: number
    temperature: number
    sunlight: number
    hardinessZone: number
    soil: number
    growthRate: number
    caution: number
    plantId: number
    _all: number
  }


  export type PlantConditionsMinAggregateInputType = {
    id?: true
    temperature?: true
    sunlight?: true
    hardinessZone?: true
    soil?: true
    growthRate?: true
    caution?: true
    plantId?: true
  }

  export type PlantConditionsMaxAggregateInputType = {
    id?: true
    temperature?: true
    sunlight?: true
    hardinessZone?: true
    soil?: true
    growthRate?: true
    caution?: true
    plantId?: true
  }

  export type PlantConditionsCountAggregateInputType = {
    id?: true
    temperature?: true
    sunlight?: true
    hardinessZone?: true
    soil?: true
    growthRate?: true
    caution?: true
    plantId?: true
    _all?: true
  }

  export type PlantConditionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantConditions to aggregate.
     */
    where?: PlantConditionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantConditions to fetch.
     */
    orderBy?: PlantConditionsOrderByWithRelationInput | PlantConditionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantConditionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantConditions
    **/
    _count?: true | PlantConditionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantConditionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantConditionsMaxAggregateInputType
  }

  export type GetPlantConditionsAggregateType<T extends PlantConditionsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantConditions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantConditions[P]>
      : GetScalarType<T[P], AggregatePlantConditions[P]>
  }




  export type PlantConditionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantConditionsWhereInput
    orderBy?: PlantConditionsOrderByWithAggregationInput | PlantConditionsOrderByWithAggregationInput[]
    by: PlantConditionsScalarFieldEnum[] | PlantConditionsScalarFieldEnum
    having?: PlantConditionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantConditionsCountAggregateInputType | true
    _min?: PlantConditionsMinAggregateInputType
    _max?: PlantConditionsMaxAggregateInputType
  }

  export type PlantConditionsGroupByOutputType = {
    id: string
    temperature: string
    sunlight: string
    hardinessZone: string
    soil: string
    growthRate: string
    caution: string
    plantId: string
    _count: PlantConditionsCountAggregateOutputType | null
    _min: PlantConditionsMinAggregateOutputType | null
    _max: PlantConditionsMaxAggregateOutputType | null
  }

  type GetPlantConditionsGroupByPayload<T extends PlantConditionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantConditionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantConditionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantConditionsGroupByOutputType[P]>
            : GetScalarType<T[P], PlantConditionsGroupByOutputType[P]>
        }
      >
    >


  export type PlantConditionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    temperature?: boolean
    sunlight?: boolean
    hardinessZone?: boolean
    soil?: boolean
    growthRate?: boolean
    caution?: boolean
    plantId?: boolean
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plantConditions"]>



  export type PlantConditionsSelectScalar = {
    id?: boolean
    temperature?: boolean
    sunlight?: boolean
    hardinessZone?: boolean
    soil?: boolean
    growthRate?: boolean
    caution?: boolean
    plantId?: boolean
  }

  export type PlantConditionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "temperature" | "sunlight" | "hardinessZone" | "soil" | "growthRate" | "caution" | "plantId", ExtArgs["result"]["plantConditions"]>
  export type PlantConditionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }

  export type $PlantConditionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlantConditions"
    objects: {
      plant: Prisma.$PlantInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      temperature: string
      sunlight: string
      hardinessZone: string
      soil: string
      growthRate: string
      caution: string
      plantId: string
    }, ExtArgs["result"]["plantConditions"]>
    composites: {}
  }

  type PlantConditionsGetPayload<S extends boolean | null | undefined | PlantConditionsDefaultArgs> = $Result.GetResult<Prisma.$PlantConditionsPayload, S>

  type PlantConditionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlantConditionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlantConditionsCountAggregateInputType | true
    }

  export interface PlantConditionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlantConditions'], meta: { name: 'PlantConditions' } }
    /**
     * Find zero or one PlantConditions that matches the filter.
     * @param {PlantConditionsFindUniqueArgs} args - Arguments to find a PlantConditions
     * @example
     * // Get one PlantConditions
     * const plantConditions = await prisma.plantConditions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantConditionsFindUniqueArgs>(args: SelectSubset<T, PlantConditionsFindUniqueArgs<ExtArgs>>): Prisma__PlantConditionsClient<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlantConditions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlantConditionsFindUniqueOrThrowArgs} args - Arguments to find a PlantConditions
     * @example
     * // Get one PlantConditions
     * const plantConditions = await prisma.plantConditions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantConditionsFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantConditionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantConditionsClient<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantConditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantConditionsFindFirstArgs} args - Arguments to find a PlantConditions
     * @example
     * // Get one PlantConditions
     * const plantConditions = await prisma.plantConditions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantConditionsFindFirstArgs>(args?: SelectSubset<T, PlantConditionsFindFirstArgs<ExtArgs>>): Prisma__PlantConditionsClient<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantConditions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantConditionsFindFirstOrThrowArgs} args - Arguments to find a PlantConditions
     * @example
     * // Get one PlantConditions
     * const plantConditions = await prisma.plantConditions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantConditionsFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantConditionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantConditionsClient<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlantConditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantConditionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantConditions
     * const plantConditions = await prisma.plantConditions.findMany()
     * 
     * // Get first 10 PlantConditions
     * const plantConditions = await prisma.plantConditions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantConditionsWithIdOnly = await prisma.plantConditions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantConditionsFindManyArgs>(args?: SelectSubset<T, PlantConditionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlantConditions.
     * @param {PlantConditionsCreateArgs} args - Arguments to create a PlantConditions.
     * @example
     * // Create one PlantConditions
     * const PlantConditions = await prisma.plantConditions.create({
     *   data: {
     *     // ... data to create a PlantConditions
     *   }
     * })
     * 
     */
    create<T extends PlantConditionsCreateArgs>(args: SelectSubset<T, PlantConditionsCreateArgs<ExtArgs>>): Prisma__PlantConditionsClient<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlantConditions.
     * @param {PlantConditionsCreateManyArgs} args - Arguments to create many PlantConditions.
     * @example
     * // Create many PlantConditions
     * const plantConditions = await prisma.plantConditions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantConditionsCreateManyArgs>(args?: SelectSubset<T, PlantConditionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlantConditions.
     * @param {PlantConditionsDeleteArgs} args - Arguments to delete one PlantConditions.
     * @example
     * // Delete one PlantConditions
     * const PlantConditions = await prisma.plantConditions.delete({
     *   where: {
     *     // ... filter to delete one PlantConditions
     *   }
     * })
     * 
     */
    delete<T extends PlantConditionsDeleteArgs>(args: SelectSubset<T, PlantConditionsDeleteArgs<ExtArgs>>): Prisma__PlantConditionsClient<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlantConditions.
     * @param {PlantConditionsUpdateArgs} args - Arguments to update one PlantConditions.
     * @example
     * // Update one PlantConditions
     * const plantConditions = await prisma.plantConditions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantConditionsUpdateArgs>(args: SelectSubset<T, PlantConditionsUpdateArgs<ExtArgs>>): Prisma__PlantConditionsClient<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlantConditions.
     * @param {PlantConditionsDeleteManyArgs} args - Arguments to filter PlantConditions to delete.
     * @example
     * // Delete a few PlantConditions
     * const { count } = await prisma.plantConditions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantConditionsDeleteManyArgs>(args?: SelectSubset<T, PlantConditionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantConditionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantConditions
     * const plantConditions = await prisma.plantConditions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantConditionsUpdateManyArgs>(args: SelectSubset<T, PlantConditionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantConditions.
     * @param {PlantConditionsUpsertArgs} args - Arguments to update or create a PlantConditions.
     * @example
     * // Update or create a PlantConditions
     * const plantConditions = await prisma.plantConditions.upsert({
     *   create: {
     *     // ... data to create a PlantConditions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantConditions we want to update
     *   }
     * })
     */
    upsert<T extends PlantConditionsUpsertArgs>(args: SelectSubset<T, PlantConditionsUpsertArgs<ExtArgs>>): Prisma__PlantConditionsClient<$Result.GetResult<Prisma.$PlantConditionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlantConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantConditionsCountArgs} args - Arguments to filter PlantConditions to count.
     * @example
     * // Count the number of PlantConditions
     * const count = await prisma.plantConditions.count({
     *   where: {
     *     // ... the filter for the PlantConditions we want to count
     *   }
     * })
    **/
    count<T extends PlantConditionsCountArgs>(
      args?: Subset<T, PlantConditionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantConditionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantConditionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantConditionsAggregateArgs>(args: Subset<T, PlantConditionsAggregateArgs>): Prisma.PrismaPromise<GetPlantConditionsAggregateType<T>>

    /**
     * Group by PlantConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantConditionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantConditionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantConditionsGroupByArgs['orderBy'] }
        : { orderBy?: PlantConditionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantConditionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantConditionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlantConditions model
   */
  readonly fields: PlantConditionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantConditions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantConditionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends PlantInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfoDefaultArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlantConditions model
   */
  interface PlantConditionsFieldRefs {
    readonly id: FieldRef<"PlantConditions", 'String'>
    readonly temperature: FieldRef<"PlantConditions", 'String'>
    readonly sunlight: FieldRef<"PlantConditions", 'String'>
    readonly hardinessZone: FieldRef<"PlantConditions", 'String'>
    readonly soil: FieldRef<"PlantConditions", 'String'>
    readonly growthRate: FieldRef<"PlantConditions", 'String'>
    readonly caution: FieldRef<"PlantConditions", 'String'>
    readonly plantId: FieldRef<"PlantConditions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlantConditions findUnique
   */
  export type PlantConditionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    /**
     * Filter, which PlantConditions to fetch.
     */
    where: PlantConditionsWhereUniqueInput
  }

  /**
   * PlantConditions findUniqueOrThrow
   */
  export type PlantConditionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    /**
     * Filter, which PlantConditions to fetch.
     */
    where: PlantConditionsWhereUniqueInput
  }

  /**
   * PlantConditions findFirst
   */
  export type PlantConditionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    /**
     * Filter, which PlantConditions to fetch.
     */
    where?: PlantConditionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantConditions to fetch.
     */
    orderBy?: PlantConditionsOrderByWithRelationInput | PlantConditionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantConditions.
     */
    cursor?: PlantConditionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantConditions.
     */
    distinct?: PlantConditionsScalarFieldEnum | PlantConditionsScalarFieldEnum[]
  }

  /**
   * PlantConditions findFirstOrThrow
   */
  export type PlantConditionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    /**
     * Filter, which PlantConditions to fetch.
     */
    where?: PlantConditionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantConditions to fetch.
     */
    orderBy?: PlantConditionsOrderByWithRelationInput | PlantConditionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantConditions.
     */
    cursor?: PlantConditionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantConditions.
     */
    distinct?: PlantConditionsScalarFieldEnum | PlantConditionsScalarFieldEnum[]
  }

  /**
   * PlantConditions findMany
   */
  export type PlantConditionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    /**
     * Filter, which PlantConditions to fetch.
     */
    where?: PlantConditionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantConditions to fetch.
     */
    orderBy?: PlantConditionsOrderByWithRelationInput | PlantConditionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantConditions.
     */
    cursor?: PlantConditionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantConditions.
     */
    skip?: number
    distinct?: PlantConditionsScalarFieldEnum | PlantConditionsScalarFieldEnum[]
  }

  /**
   * PlantConditions create
   */
  export type PlantConditionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    /**
     * The data needed to create a PlantConditions.
     */
    data: XOR<PlantConditionsCreateInput, PlantConditionsUncheckedCreateInput>
  }

  /**
   * PlantConditions createMany
   */
  export type PlantConditionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlantConditions.
     */
    data: PlantConditionsCreateManyInput | PlantConditionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlantConditions update
   */
  export type PlantConditionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    /**
     * The data needed to update a PlantConditions.
     */
    data: XOR<PlantConditionsUpdateInput, PlantConditionsUncheckedUpdateInput>
    /**
     * Choose, which PlantConditions to update.
     */
    where: PlantConditionsWhereUniqueInput
  }

  /**
   * PlantConditions updateMany
   */
  export type PlantConditionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlantConditions.
     */
    data: XOR<PlantConditionsUpdateManyMutationInput, PlantConditionsUncheckedUpdateManyInput>
    /**
     * Filter which PlantConditions to update
     */
    where?: PlantConditionsWhereInput
    /**
     * Limit how many PlantConditions to update.
     */
    limit?: number
  }

  /**
   * PlantConditions upsert
   */
  export type PlantConditionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    /**
     * The filter to search for the PlantConditions to update in case it exists.
     */
    where: PlantConditionsWhereUniqueInput
    /**
     * In case the PlantConditions found by the `where` argument doesn't exist, create a new PlantConditions with this data.
     */
    create: XOR<PlantConditionsCreateInput, PlantConditionsUncheckedCreateInput>
    /**
     * In case the PlantConditions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantConditionsUpdateInput, PlantConditionsUncheckedUpdateInput>
  }

  /**
   * PlantConditions delete
   */
  export type PlantConditionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
    /**
     * Filter which PlantConditions to delete.
     */
    where: PlantConditionsWhereUniqueInput
  }

  /**
   * PlantConditions deleteMany
   */
  export type PlantConditionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantConditions to delete
     */
    where?: PlantConditionsWhereInput
    /**
     * Limit how many PlantConditions to delete.
     */
    limit?: number
  }

  /**
   * PlantConditions without action
   */
  export type PlantConditionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantConditions
     */
    select?: PlantConditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantConditions
     */
    omit?: PlantConditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantConditionsInclude<ExtArgs> | null
  }


  /**
   * Model PlantCare
   */

  export type AggregatePlantCare = {
    _count: PlantCareCountAggregateOutputType | null
    _min: PlantCareMinAggregateOutputType | null
    _max: PlantCareMaxAggregateOutputType | null
  }

  export type PlantCareMinAggregateOutputType = {
    id: string | null
    watering: string | null
    fertilizer: string | null
    pruning: string | null
    propagation: string | null
    repotting: string | null
    humidity: string | null
    plantId: string | null
  }

  export type PlantCareMaxAggregateOutputType = {
    id: string | null
    watering: string | null
    fertilizer: string | null
    pruning: string | null
    propagation: string | null
    repotting: string | null
    humidity: string | null
    plantId: string | null
  }

  export type PlantCareCountAggregateOutputType = {
    id: number
    watering: number
    fertilizer: number
    pruning: number
    propagation: number
    repotting: number
    humidity: number
    plantId: number
    _all: number
  }


  export type PlantCareMinAggregateInputType = {
    id?: true
    watering?: true
    fertilizer?: true
    pruning?: true
    propagation?: true
    repotting?: true
    humidity?: true
    plantId?: true
  }

  export type PlantCareMaxAggregateInputType = {
    id?: true
    watering?: true
    fertilizer?: true
    pruning?: true
    propagation?: true
    repotting?: true
    humidity?: true
    plantId?: true
  }

  export type PlantCareCountAggregateInputType = {
    id?: true
    watering?: true
    fertilizer?: true
    pruning?: true
    propagation?: true
    repotting?: true
    humidity?: true
    plantId?: true
    _all?: true
  }

  export type PlantCareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantCare to aggregate.
     */
    where?: PlantCareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantCares to fetch.
     */
    orderBy?: PlantCareOrderByWithRelationInput | PlantCareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantCareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantCares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantCares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantCares
    **/
    _count?: true | PlantCareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantCareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantCareMaxAggregateInputType
  }

  export type GetPlantCareAggregateType<T extends PlantCareAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantCare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantCare[P]>
      : GetScalarType<T[P], AggregatePlantCare[P]>
  }




  export type PlantCareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantCareWhereInput
    orderBy?: PlantCareOrderByWithAggregationInput | PlantCareOrderByWithAggregationInput[]
    by: PlantCareScalarFieldEnum[] | PlantCareScalarFieldEnum
    having?: PlantCareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantCareCountAggregateInputType | true
    _min?: PlantCareMinAggregateInputType
    _max?: PlantCareMaxAggregateInputType
  }

  export type PlantCareGroupByOutputType = {
    id: string
    watering: string
    fertilizer: string
    pruning: string
    propagation: string
    repotting: string
    humidity: string
    plantId: string
    _count: PlantCareCountAggregateOutputType | null
    _min: PlantCareMinAggregateOutputType | null
    _max: PlantCareMaxAggregateOutputType | null
  }

  type GetPlantCareGroupByPayload<T extends PlantCareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantCareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantCareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantCareGroupByOutputType[P]>
            : GetScalarType<T[P], PlantCareGroupByOutputType[P]>
        }
      >
    >


  export type PlantCareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    watering?: boolean
    fertilizer?: boolean
    pruning?: boolean
    propagation?: boolean
    repotting?: boolean
    humidity?: boolean
    plantId?: boolean
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plantCare"]>



  export type PlantCareSelectScalar = {
    id?: boolean
    watering?: boolean
    fertilizer?: boolean
    pruning?: boolean
    propagation?: boolean
    repotting?: boolean
    humidity?: boolean
    plantId?: boolean
  }

  export type PlantCareOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "watering" | "fertilizer" | "pruning" | "propagation" | "repotting" | "humidity" | "plantId", ExtArgs["result"]["plantCare"]>
  export type PlantCareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }

  export type $PlantCarePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlantCare"
    objects: {
      plant: Prisma.$PlantInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      watering: string
      fertilizer: string
      pruning: string
      propagation: string
      repotting: string
      humidity: string
      plantId: string
    }, ExtArgs["result"]["plantCare"]>
    composites: {}
  }

  type PlantCareGetPayload<S extends boolean | null | undefined | PlantCareDefaultArgs> = $Result.GetResult<Prisma.$PlantCarePayload, S>

  type PlantCareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlantCareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlantCareCountAggregateInputType | true
    }

  export interface PlantCareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlantCare'], meta: { name: 'PlantCare' } }
    /**
     * Find zero or one PlantCare that matches the filter.
     * @param {PlantCareFindUniqueArgs} args - Arguments to find a PlantCare
     * @example
     * // Get one PlantCare
     * const plantCare = await prisma.plantCare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantCareFindUniqueArgs>(args: SelectSubset<T, PlantCareFindUniqueArgs<ExtArgs>>): Prisma__PlantCareClient<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlantCare that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlantCareFindUniqueOrThrowArgs} args - Arguments to find a PlantCare
     * @example
     * // Get one PlantCare
     * const plantCare = await prisma.plantCare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantCareFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantCareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantCareClient<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantCare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCareFindFirstArgs} args - Arguments to find a PlantCare
     * @example
     * // Get one PlantCare
     * const plantCare = await prisma.plantCare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantCareFindFirstArgs>(args?: SelectSubset<T, PlantCareFindFirstArgs<ExtArgs>>): Prisma__PlantCareClient<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantCare that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCareFindFirstOrThrowArgs} args - Arguments to find a PlantCare
     * @example
     * // Get one PlantCare
     * const plantCare = await prisma.plantCare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantCareFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantCareFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantCareClient<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlantCares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantCares
     * const plantCares = await prisma.plantCare.findMany()
     * 
     * // Get first 10 PlantCares
     * const plantCares = await prisma.plantCare.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantCareWithIdOnly = await prisma.plantCare.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantCareFindManyArgs>(args?: SelectSubset<T, PlantCareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlantCare.
     * @param {PlantCareCreateArgs} args - Arguments to create a PlantCare.
     * @example
     * // Create one PlantCare
     * const PlantCare = await prisma.plantCare.create({
     *   data: {
     *     // ... data to create a PlantCare
     *   }
     * })
     * 
     */
    create<T extends PlantCareCreateArgs>(args: SelectSubset<T, PlantCareCreateArgs<ExtArgs>>): Prisma__PlantCareClient<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlantCares.
     * @param {PlantCareCreateManyArgs} args - Arguments to create many PlantCares.
     * @example
     * // Create many PlantCares
     * const plantCare = await prisma.plantCare.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantCareCreateManyArgs>(args?: SelectSubset<T, PlantCareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlantCare.
     * @param {PlantCareDeleteArgs} args - Arguments to delete one PlantCare.
     * @example
     * // Delete one PlantCare
     * const PlantCare = await prisma.plantCare.delete({
     *   where: {
     *     // ... filter to delete one PlantCare
     *   }
     * })
     * 
     */
    delete<T extends PlantCareDeleteArgs>(args: SelectSubset<T, PlantCareDeleteArgs<ExtArgs>>): Prisma__PlantCareClient<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlantCare.
     * @param {PlantCareUpdateArgs} args - Arguments to update one PlantCare.
     * @example
     * // Update one PlantCare
     * const plantCare = await prisma.plantCare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantCareUpdateArgs>(args: SelectSubset<T, PlantCareUpdateArgs<ExtArgs>>): Prisma__PlantCareClient<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlantCares.
     * @param {PlantCareDeleteManyArgs} args - Arguments to filter PlantCares to delete.
     * @example
     * // Delete a few PlantCares
     * const { count } = await prisma.plantCare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantCareDeleteManyArgs>(args?: SelectSubset<T, PlantCareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantCares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantCares
     * const plantCare = await prisma.plantCare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantCareUpdateManyArgs>(args: SelectSubset<T, PlantCareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantCare.
     * @param {PlantCareUpsertArgs} args - Arguments to update or create a PlantCare.
     * @example
     * // Update or create a PlantCare
     * const plantCare = await prisma.plantCare.upsert({
     *   create: {
     *     // ... data to create a PlantCare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantCare we want to update
     *   }
     * })
     */
    upsert<T extends PlantCareUpsertArgs>(args: SelectSubset<T, PlantCareUpsertArgs<ExtArgs>>): Prisma__PlantCareClient<$Result.GetResult<Prisma.$PlantCarePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlantCares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCareCountArgs} args - Arguments to filter PlantCares to count.
     * @example
     * // Count the number of PlantCares
     * const count = await prisma.plantCare.count({
     *   where: {
     *     // ... the filter for the PlantCares we want to count
     *   }
     * })
    **/
    count<T extends PlantCareCountArgs>(
      args?: Subset<T, PlantCareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantCareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantCare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantCareAggregateArgs>(args: Subset<T, PlantCareAggregateArgs>): Prisma.PrismaPromise<GetPlantCareAggregateType<T>>

    /**
     * Group by PlantCare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantCareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantCareGroupByArgs['orderBy'] }
        : { orderBy?: PlantCareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantCareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantCareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlantCare model
   */
  readonly fields: PlantCareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantCare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantCareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends PlantInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfoDefaultArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlantCare model
   */
  interface PlantCareFieldRefs {
    readonly id: FieldRef<"PlantCare", 'String'>
    readonly watering: FieldRef<"PlantCare", 'String'>
    readonly fertilizer: FieldRef<"PlantCare", 'String'>
    readonly pruning: FieldRef<"PlantCare", 'String'>
    readonly propagation: FieldRef<"PlantCare", 'String'>
    readonly repotting: FieldRef<"PlantCare", 'String'>
    readonly humidity: FieldRef<"PlantCare", 'String'>
    readonly plantId: FieldRef<"PlantCare", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlantCare findUnique
   */
  export type PlantCareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    /**
     * Filter, which PlantCare to fetch.
     */
    where: PlantCareWhereUniqueInput
  }

  /**
   * PlantCare findUniqueOrThrow
   */
  export type PlantCareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    /**
     * Filter, which PlantCare to fetch.
     */
    where: PlantCareWhereUniqueInput
  }

  /**
   * PlantCare findFirst
   */
  export type PlantCareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    /**
     * Filter, which PlantCare to fetch.
     */
    where?: PlantCareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantCares to fetch.
     */
    orderBy?: PlantCareOrderByWithRelationInput | PlantCareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantCares.
     */
    cursor?: PlantCareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantCares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantCares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantCares.
     */
    distinct?: PlantCareScalarFieldEnum | PlantCareScalarFieldEnum[]
  }

  /**
   * PlantCare findFirstOrThrow
   */
  export type PlantCareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    /**
     * Filter, which PlantCare to fetch.
     */
    where?: PlantCareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantCares to fetch.
     */
    orderBy?: PlantCareOrderByWithRelationInput | PlantCareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantCares.
     */
    cursor?: PlantCareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantCares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantCares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantCares.
     */
    distinct?: PlantCareScalarFieldEnum | PlantCareScalarFieldEnum[]
  }

  /**
   * PlantCare findMany
   */
  export type PlantCareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    /**
     * Filter, which PlantCares to fetch.
     */
    where?: PlantCareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantCares to fetch.
     */
    orderBy?: PlantCareOrderByWithRelationInput | PlantCareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantCares.
     */
    cursor?: PlantCareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantCares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantCares.
     */
    skip?: number
    distinct?: PlantCareScalarFieldEnum | PlantCareScalarFieldEnum[]
  }

  /**
   * PlantCare create
   */
  export type PlantCareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    /**
     * The data needed to create a PlantCare.
     */
    data: XOR<PlantCareCreateInput, PlantCareUncheckedCreateInput>
  }

  /**
   * PlantCare createMany
   */
  export type PlantCareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlantCares.
     */
    data: PlantCareCreateManyInput | PlantCareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlantCare update
   */
  export type PlantCareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    /**
     * The data needed to update a PlantCare.
     */
    data: XOR<PlantCareUpdateInput, PlantCareUncheckedUpdateInput>
    /**
     * Choose, which PlantCare to update.
     */
    where: PlantCareWhereUniqueInput
  }

  /**
   * PlantCare updateMany
   */
  export type PlantCareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlantCares.
     */
    data: XOR<PlantCareUpdateManyMutationInput, PlantCareUncheckedUpdateManyInput>
    /**
     * Filter which PlantCares to update
     */
    where?: PlantCareWhereInput
    /**
     * Limit how many PlantCares to update.
     */
    limit?: number
  }

  /**
   * PlantCare upsert
   */
  export type PlantCareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    /**
     * The filter to search for the PlantCare to update in case it exists.
     */
    where: PlantCareWhereUniqueInput
    /**
     * In case the PlantCare found by the `where` argument doesn't exist, create a new PlantCare with this data.
     */
    create: XOR<PlantCareCreateInput, PlantCareUncheckedCreateInput>
    /**
     * In case the PlantCare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantCareUpdateInput, PlantCareUncheckedUpdateInput>
  }

  /**
   * PlantCare delete
   */
  export type PlantCareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
    /**
     * Filter which PlantCare to delete.
     */
    where: PlantCareWhereUniqueInput
  }

  /**
   * PlantCare deleteMany
   */
  export type PlantCareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantCares to delete
     */
    where?: PlantCareWhereInput
    /**
     * Limit how many PlantCares to delete.
     */
    limit?: number
  }

  /**
   * PlantCare without action
   */
  export type PlantCareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCare
     */
    select?: PlantCareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantCare
     */
    omit?: PlantCareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantCareInclude<ExtArgs> | null
  }


  /**
   * Model PlantPest
   */

  export type AggregatePlantPest = {
    _count: PlantPestCountAggregateOutputType | null
    _min: PlantPestMinAggregateOutputType | null
    _max: PlantPestMaxAggregateOutputType | null
  }

  export type PlantPestMinAggregateOutputType = {
    id: string | null
    name: string | null
    plantId: string | null
  }

  export type PlantPestMaxAggregateOutputType = {
    id: string | null
    name: string | null
    plantId: string | null
  }

  export type PlantPestCountAggregateOutputType = {
    id: number
    name: number
    plantId: number
    _all: number
  }


  export type PlantPestMinAggregateInputType = {
    id?: true
    name?: true
    plantId?: true
  }

  export type PlantPestMaxAggregateInputType = {
    id?: true
    name?: true
    plantId?: true
  }

  export type PlantPestCountAggregateInputType = {
    id?: true
    name?: true
    plantId?: true
    _all?: true
  }

  export type PlantPestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantPest to aggregate.
     */
    where?: PlantPestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantPests to fetch.
     */
    orderBy?: PlantPestOrderByWithRelationInput | PlantPestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantPestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantPests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantPests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantPests
    **/
    _count?: true | PlantPestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantPestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantPestMaxAggregateInputType
  }

  export type GetPlantPestAggregateType<T extends PlantPestAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantPest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantPest[P]>
      : GetScalarType<T[P], AggregatePlantPest[P]>
  }




  export type PlantPestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantPestWhereInput
    orderBy?: PlantPestOrderByWithAggregationInput | PlantPestOrderByWithAggregationInput[]
    by: PlantPestScalarFieldEnum[] | PlantPestScalarFieldEnum
    having?: PlantPestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantPestCountAggregateInputType | true
    _min?: PlantPestMinAggregateInputType
    _max?: PlantPestMaxAggregateInputType
  }

  export type PlantPestGroupByOutputType = {
    id: string
    name: string
    plantId: string
    _count: PlantPestCountAggregateOutputType | null
    _min: PlantPestMinAggregateOutputType | null
    _max: PlantPestMaxAggregateOutputType | null
  }

  type GetPlantPestGroupByPayload<T extends PlantPestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantPestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantPestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantPestGroupByOutputType[P]>
            : GetScalarType<T[P], PlantPestGroupByOutputType[P]>
        }
      >
    >


  export type PlantPestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    plantId?: boolean
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plantPest"]>



  export type PlantPestSelectScalar = {
    id?: boolean
    name?: boolean
    plantId?: boolean
  }

  export type PlantPestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "plantId", ExtArgs["result"]["plantPest"]>
  export type PlantPestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }

  export type $PlantPestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlantPest"
    objects: {
      plant: Prisma.$PlantInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      plantId: string
    }, ExtArgs["result"]["plantPest"]>
    composites: {}
  }

  type PlantPestGetPayload<S extends boolean | null | undefined | PlantPestDefaultArgs> = $Result.GetResult<Prisma.$PlantPestPayload, S>

  type PlantPestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlantPestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlantPestCountAggregateInputType | true
    }

  export interface PlantPestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlantPest'], meta: { name: 'PlantPest' } }
    /**
     * Find zero or one PlantPest that matches the filter.
     * @param {PlantPestFindUniqueArgs} args - Arguments to find a PlantPest
     * @example
     * // Get one PlantPest
     * const plantPest = await prisma.plantPest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantPestFindUniqueArgs>(args: SelectSubset<T, PlantPestFindUniqueArgs<ExtArgs>>): Prisma__PlantPestClient<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlantPest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlantPestFindUniqueOrThrowArgs} args - Arguments to find a PlantPest
     * @example
     * // Get one PlantPest
     * const plantPest = await prisma.plantPest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantPestFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantPestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantPestClient<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantPest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantPestFindFirstArgs} args - Arguments to find a PlantPest
     * @example
     * // Get one PlantPest
     * const plantPest = await prisma.plantPest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantPestFindFirstArgs>(args?: SelectSubset<T, PlantPestFindFirstArgs<ExtArgs>>): Prisma__PlantPestClient<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantPest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantPestFindFirstOrThrowArgs} args - Arguments to find a PlantPest
     * @example
     * // Get one PlantPest
     * const plantPest = await prisma.plantPest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantPestFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantPestFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantPestClient<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlantPests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantPestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantPests
     * const plantPests = await prisma.plantPest.findMany()
     * 
     * // Get first 10 PlantPests
     * const plantPests = await prisma.plantPest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantPestWithIdOnly = await prisma.plantPest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantPestFindManyArgs>(args?: SelectSubset<T, PlantPestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlantPest.
     * @param {PlantPestCreateArgs} args - Arguments to create a PlantPest.
     * @example
     * // Create one PlantPest
     * const PlantPest = await prisma.plantPest.create({
     *   data: {
     *     // ... data to create a PlantPest
     *   }
     * })
     * 
     */
    create<T extends PlantPestCreateArgs>(args: SelectSubset<T, PlantPestCreateArgs<ExtArgs>>): Prisma__PlantPestClient<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlantPests.
     * @param {PlantPestCreateManyArgs} args - Arguments to create many PlantPests.
     * @example
     * // Create many PlantPests
     * const plantPest = await prisma.plantPest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantPestCreateManyArgs>(args?: SelectSubset<T, PlantPestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlantPest.
     * @param {PlantPestDeleteArgs} args - Arguments to delete one PlantPest.
     * @example
     * // Delete one PlantPest
     * const PlantPest = await prisma.plantPest.delete({
     *   where: {
     *     // ... filter to delete one PlantPest
     *   }
     * })
     * 
     */
    delete<T extends PlantPestDeleteArgs>(args: SelectSubset<T, PlantPestDeleteArgs<ExtArgs>>): Prisma__PlantPestClient<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlantPest.
     * @param {PlantPestUpdateArgs} args - Arguments to update one PlantPest.
     * @example
     * // Update one PlantPest
     * const plantPest = await prisma.plantPest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantPestUpdateArgs>(args: SelectSubset<T, PlantPestUpdateArgs<ExtArgs>>): Prisma__PlantPestClient<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlantPests.
     * @param {PlantPestDeleteManyArgs} args - Arguments to filter PlantPests to delete.
     * @example
     * // Delete a few PlantPests
     * const { count } = await prisma.plantPest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantPestDeleteManyArgs>(args?: SelectSubset<T, PlantPestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantPests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantPestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantPests
     * const plantPest = await prisma.plantPest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantPestUpdateManyArgs>(args: SelectSubset<T, PlantPestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantPest.
     * @param {PlantPestUpsertArgs} args - Arguments to update or create a PlantPest.
     * @example
     * // Update or create a PlantPest
     * const plantPest = await prisma.plantPest.upsert({
     *   create: {
     *     // ... data to create a PlantPest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantPest we want to update
     *   }
     * })
     */
    upsert<T extends PlantPestUpsertArgs>(args: SelectSubset<T, PlantPestUpsertArgs<ExtArgs>>): Prisma__PlantPestClient<$Result.GetResult<Prisma.$PlantPestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlantPests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantPestCountArgs} args - Arguments to filter PlantPests to count.
     * @example
     * // Count the number of PlantPests
     * const count = await prisma.plantPest.count({
     *   where: {
     *     // ... the filter for the PlantPests we want to count
     *   }
     * })
    **/
    count<T extends PlantPestCountArgs>(
      args?: Subset<T, PlantPestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantPestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantPest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantPestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantPestAggregateArgs>(args: Subset<T, PlantPestAggregateArgs>): Prisma.PrismaPromise<GetPlantPestAggregateType<T>>

    /**
     * Group by PlantPest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantPestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantPestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantPestGroupByArgs['orderBy'] }
        : { orderBy?: PlantPestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantPestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantPestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlantPest model
   */
  readonly fields: PlantPestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantPest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantPestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends PlantInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfoDefaultArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlantPest model
   */
  interface PlantPestFieldRefs {
    readonly id: FieldRef<"PlantPest", 'String'>
    readonly name: FieldRef<"PlantPest", 'String'>
    readonly plantId: FieldRef<"PlantPest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlantPest findUnique
   */
  export type PlantPestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    /**
     * Filter, which PlantPest to fetch.
     */
    where: PlantPestWhereUniqueInput
  }

  /**
   * PlantPest findUniqueOrThrow
   */
  export type PlantPestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    /**
     * Filter, which PlantPest to fetch.
     */
    where: PlantPestWhereUniqueInput
  }

  /**
   * PlantPest findFirst
   */
  export type PlantPestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    /**
     * Filter, which PlantPest to fetch.
     */
    where?: PlantPestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantPests to fetch.
     */
    orderBy?: PlantPestOrderByWithRelationInput | PlantPestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantPests.
     */
    cursor?: PlantPestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantPests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantPests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantPests.
     */
    distinct?: PlantPestScalarFieldEnum | PlantPestScalarFieldEnum[]
  }

  /**
   * PlantPest findFirstOrThrow
   */
  export type PlantPestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    /**
     * Filter, which PlantPest to fetch.
     */
    where?: PlantPestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantPests to fetch.
     */
    orderBy?: PlantPestOrderByWithRelationInput | PlantPestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantPests.
     */
    cursor?: PlantPestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantPests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantPests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantPests.
     */
    distinct?: PlantPestScalarFieldEnum | PlantPestScalarFieldEnum[]
  }

  /**
   * PlantPest findMany
   */
  export type PlantPestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    /**
     * Filter, which PlantPests to fetch.
     */
    where?: PlantPestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantPests to fetch.
     */
    orderBy?: PlantPestOrderByWithRelationInput | PlantPestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantPests.
     */
    cursor?: PlantPestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantPests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantPests.
     */
    skip?: number
    distinct?: PlantPestScalarFieldEnum | PlantPestScalarFieldEnum[]
  }

  /**
   * PlantPest create
   */
  export type PlantPestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    /**
     * The data needed to create a PlantPest.
     */
    data: XOR<PlantPestCreateInput, PlantPestUncheckedCreateInput>
  }

  /**
   * PlantPest createMany
   */
  export type PlantPestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlantPests.
     */
    data: PlantPestCreateManyInput | PlantPestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlantPest update
   */
  export type PlantPestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    /**
     * The data needed to update a PlantPest.
     */
    data: XOR<PlantPestUpdateInput, PlantPestUncheckedUpdateInput>
    /**
     * Choose, which PlantPest to update.
     */
    where: PlantPestWhereUniqueInput
  }

  /**
   * PlantPest updateMany
   */
  export type PlantPestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlantPests.
     */
    data: XOR<PlantPestUpdateManyMutationInput, PlantPestUncheckedUpdateManyInput>
    /**
     * Filter which PlantPests to update
     */
    where?: PlantPestWhereInput
    /**
     * Limit how many PlantPests to update.
     */
    limit?: number
  }

  /**
   * PlantPest upsert
   */
  export type PlantPestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    /**
     * The filter to search for the PlantPest to update in case it exists.
     */
    where: PlantPestWhereUniqueInput
    /**
     * In case the PlantPest found by the `where` argument doesn't exist, create a new PlantPest with this data.
     */
    create: XOR<PlantPestCreateInput, PlantPestUncheckedCreateInput>
    /**
     * In case the PlantPest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantPestUpdateInput, PlantPestUncheckedUpdateInput>
  }

  /**
   * PlantPest delete
   */
  export type PlantPestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
    /**
     * Filter which PlantPest to delete.
     */
    where: PlantPestWhereUniqueInput
  }

  /**
   * PlantPest deleteMany
   */
  export type PlantPestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantPests to delete
     */
    where?: PlantPestWhereInput
    /**
     * Limit how many PlantPests to delete.
     */
    limit?: number
  }

  /**
   * PlantPest without action
   */
  export type PlantPestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantPest
     */
    select?: PlantPestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantPest
     */
    omit?: PlantPestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantPestInclude<ExtArgs> | null
  }


  /**
   * Model PlantFeature
   */

  export type AggregatePlantFeature = {
    _count: PlantFeatureCountAggregateOutputType | null
    _min: PlantFeatureMinAggregateOutputType | null
    _max: PlantFeatureMaxAggregateOutputType | null
  }

  export type PlantFeatureMinAggregateOutputType = {
    id: string | null
    detail: string | null
    plantId: string | null
  }

  export type PlantFeatureMaxAggregateOutputType = {
    id: string | null
    detail: string | null
    plantId: string | null
  }

  export type PlantFeatureCountAggregateOutputType = {
    id: number
    detail: number
    plantId: number
    _all: number
  }


  export type PlantFeatureMinAggregateInputType = {
    id?: true
    detail?: true
    plantId?: true
  }

  export type PlantFeatureMaxAggregateInputType = {
    id?: true
    detail?: true
    plantId?: true
  }

  export type PlantFeatureCountAggregateInputType = {
    id?: true
    detail?: true
    plantId?: true
    _all?: true
  }

  export type PlantFeatureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantFeature to aggregate.
     */
    where?: PlantFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantFeatures to fetch.
     */
    orderBy?: PlantFeatureOrderByWithRelationInput | PlantFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantFeatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantFeatures
    **/
    _count?: true | PlantFeatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantFeatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantFeatureMaxAggregateInputType
  }

  export type GetPlantFeatureAggregateType<T extends PlantFeatureAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantFeature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantFeature[P]>
      : GetScalarType<T[P], AggregatePlantFeature[P]>
  }




  export type PlantFeatureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantFeatureWhereInput
    orderBy?: PlantFeatureOrderByWithAggregationInput | PlantFeatureOrderByWithAggregationInput[]
    by: PlantFeatureScalarFieldEnum[] | PlantFeatureScalarFieldEnum
    having?: PlantFeatureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantFeatureCountAggregateInputType | true
    _min?: PlantFeatureMinAggregateInputType
    _max?: PlantFeatureMaxAggregateInputType
  }

  export type PlantFeatureGroupByOutputType = {
    id: string
    detail: string
    plantId: string
    _count: PlantFeatureCountAggregateOutputType | null
    _min: PlantFeatureMinAggregateOutputType | null
    _max: PlantFeatureMaxAggregateOutputType | null
  }

  type GetPlantFeatureGroupByPayload<T extends PlantFeatureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantFeatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantFeatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantFeatureGroupByOutputType[P]>
            : GetScalarType<T[P], PlantFeatureGroupByOutputType[P]>
        }
      >
    >


  export type PlantFeatureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    detail?: boolean
    plantId?: boolean
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plantFeature"]>



  export type PlantFeatureSelectScalar = {
    id?: boolean
    detail?: boolean
    plantId?: boolean
  }

  export type PlantFeatureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "detail" | "plantId", ExtArgs["result"]["plantFeature"]>
  export type PlantFeatureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantInfoDefaultArgs<ExtArgs>
  }

  export type $PlantFeaturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlantFeature"
    objects: {
      plant: Prisma.$PlantInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      detail: string
      plantId: string
    }, ExtArgs["result"]["plantFeature"]>
    composites: {}
  }

  type PlantFeatureGetPayload<S extends boolean | null | undefined | PlantFeatureDefaultArgs> = $Result.GetResult<Prisma.$PlantFeaturePayload, S>

  type PlantFeatureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlantFeatureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlantFeatureCountAggregateInputType | true
    }

  export interface PlantFeatureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlantFeature'], meta: { name: 'PlantFeature' } }
    /**
     * Find zero or one PlantFeature that matches the filter.
     * @param {PlantFeatureFindUniqueArgs} args - Arguments to find a PlantFeature
     * @example
     * // Get one PlantFeature
     * const plantFeature = await prisma.plantFeature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantFeatureFindUniqueArgs>(args: SelectSubset<T, PlantFeatureFindUniqueArgs<ExtArgs>>): Prisma__PlantFeatureClient<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlantFeature that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlantFeatureFindUniqueOrThrowArgs} args - Arguments to find a PlantFeature
     * @example
     * // Get one PlantFeature
     * const plantFeature = await prisma.plantFeature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantFeatureFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantFeatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantFeatureClient<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantFeature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFeatureFindFirstArgs} args - Arguments to find a PlantFeature
     * @example
     * // Get one PlantFeature
     * const plantFeature = await prisma.plantFeature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantFeatureFindFirstArgs>(args?: SelectSubset<T, PlantFeatureFindFirstArgs<ExtArgs>>): Prisma__PlantFeatureClient<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantFeature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFeatureFindFirstOrThrowArgs} args - Arguments to find a PlantFeature
     * @example
     * // Get one PlantFeature
     * const plantFeature = await prisma.plantFeature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantFeatureFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantFeatureFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantFeatureClient<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlantFeatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFeatureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantFeatures
     * const plantFeatures = await prisma.plantFeature.findMany()
     * 
     * // Get first 10 PlantFeatures
     * const plantFeatures = await prisma.plantFeature.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantFeatureWithIdOnly = await prisma.plantFeature.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantFeatureFindManyArgs>(args?: SelectSubset<T, PlantFeatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlantFeature.
     * @param {PlantFeatureCreateArgs} args - Arguments to create a PlantFeature.
     * @example
     * // Create one PlantFeature
     * const PlantFeature = await prisma.plantFeature.create({
     *   data: {
     *     // ... data to create a PlantFeature
     *   }
     * })
     * 
     */
    create<T extends PlantFeatureCreateArgs>(args: SelectSubset<T, PlantFeatureCreateArgs<ExtArgs>>): Prisma__PlantFeatureClient<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlantFeatures.
     * @param {PlantFeatureCreateManyArgs} args - Arguments to create many PlantFeatures.
     * @example
     * // Create many PlantFeatures
     * const plantFeature = await prisma.plantFeature.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantFeatureCreateManyArgs>(args?: SelectSubset<T, PlantFeatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlantFeature.
     * @param {PlantFeatureDeleteArgs} args - Arguments to delete one PlantFeature.
     * @example
     * // Delete one PlantFeature
     * const PlantFeature = await prisma.plantFeature.delete({
     *   where: {
     *     // ... filter to delete one PlantFeature
     *   }
     * })
     * 
     */
    delete<T extends PlantFeatureDeleteArgs>(args: SelectSubset<T, PlantFeatureDeleteArgs<ExtArgs>>): Prisma__PlantFeatureClient<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlantFeature.
     * @param {PlantFeatureUpdateArgs} args - Arguments to update one PlantFeature.
     * @example
     * // Update one PlantFeature
     * const plantFeature = await prisma.plantFeature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantFeatureUpdateArgs>(args: SelectSubset<T, PlantFeatureUpdateArgs<ExtArgs>>): Prisma__PlantFeatureClient<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlantFeatures.
     * @param {PlantFeatureDeleteManyArgs} args - Arguments to filter PlantFeatures to delete.
     * @example
     * // Delete a few PlantFeatures
     * const { count } = await prisma.plantFeature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantFeatureDeleteManyArgs>(args?: SelectSubset<T, PlantFeatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFeatureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantFeatures
     * const plantFeature = await prisma.plantFeature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantFeatureUpdateManyArgs>(args: SelectSubset<T, PlantFeatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantFeature.
     * @param {PlantFeatureUpsertArgs} args - Arguments to update or create a PlantFeature.
     * @example
     * // Update or create a PlantFeature
     * const plantFeature = await prisma.plantFeature.upsert({
     *   create: {
     *     // ... data to create a PlantFeature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantFeature we want to update
     *   }
     * })
     */
    upsert<T extends PlantFeatureUpsertArgs>(args: SelectSubset<T, PlantFeatureUpsertArgs<ExtArgs>>): Prisma__PlantFeatureClient<$Result.GetResult<Prisma.$PlantFeaturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlantFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFeatureCountArgs} args - Arguments to filter PlantFeatures to count.
     * @example
     * // Count the number of PlantFeatures
     * const count = await prisma.plantFeature.count({
     *   where: {
     *     // ... the filter for the PlantFeatures we want to count
     *   }
     * })
    **/
    count<T extends PlantFeatureCountArgs>(
      args?: Subset<T, PlantFeatureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantFeatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantFeature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantFeatureAggregateArgs>(args: Subset<T, PlantFeatureAggregateArgs>): Prisma.PrismaPromise<GetPlantFeatureAggregateType<T>>

    /**
     * Group by PlantFeature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFeatureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantFeatureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantFeatureGroupByArgs['orderBy'] }
        : { orderBy?: PlantFeatureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantFeatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlantFeature model
   */
  readonly fields: PlantFeatureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantFeature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantFeatureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends PlantInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantInfoDefaultArgs<ExtArgs>>): Prisma__PlantInfoClient<$Result.GetResult<Prisma.$PlantInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlantFeature model
   */
  interface PlantFeatureFieldRefs {
    readonly id: FieldRef<"PlantFeature", 'String'>
    readonly detail: FieldRef<"PlantFeature", 'String'>
    readonly plantId: FieldRef<"PlantFeature", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlantFeature findUnique
   */
  export type PlantFeatureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    /**
     * Filter, which PlantFeature to fetch.
     */
    where: PlantFeatureWhereUniqueInput
  }

  /**
   * PlantFeature findUniqueOrThrow
   */
  export type PlantFeatureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    /**
     * Filter, which PlantFeature to fetch.
     */
    where: PlantFeatureWhereUniqueInput
  }

  /**
   * PlantFeature findFirst
   */
  export type PlantFeatureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    /**
     * Filter, which PlantFeature to fetch.
     */
    where?: PlantFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantFeatures to fetch.
     */
    orderBy?: PlantFeatureOrderByWithRelationInput | PlantFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantFeatures.
     */
    cursor?: PlantFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantFeatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantFeatures.
     */
    distinct?: PlantFeatureScalarFieldEnum | PlantFeatureScalarFieldEnum[]
  }

  /**
   * PlantFeature findFirstOrThrow
   */
  export type PlantFeatureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    /**
     * Filter, which PlantFeature to fetch.
     */
    where?: PlantFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantFeatures to fetch.
     */
    orderBy?: PlantFeatureOrderByWithRelationInput | PlantFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantFeatures.
     */
    cursor?: PlantFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantFeatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantFeatures.
     */
    distinct?: PlantFeatureScalarFieldEnum | PlantFeatureScalarFieldEnum[]
  }

  /**
   * PlantFeature findMany
   */
  export type PlantFeatureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    /**
     * Filter, which PlantFeatures to fetch.
     */
    where?: PlantFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantFeatures to fetch.
     */
    orderBy?: PlantFeatureOrderByWithRelationInput | PlantFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantFeatures.
     */
    cursor?: PlantFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantFeatures.
     */
    skip?: number
    distinct?: PlantFeatureScalarFieldEnum | PlantFeatureScalarFieldEnum[]
  }

  /**
   * PlantFeature create
   */
  export type PlantFeatureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    /**
     * The data needed to create a PlantFeature.
     */
    data: XOR<PlantFeatureCreateInput, PlantFeatureUncheckedCreateInput>
  }

  /**
   * PlantFeature createMany
   */
  export type PlantFeatureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlantFeatures.
     */
    data: PlantFeatureCreateManyInput | PlantFeatureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlantFeature update
   */
  export type PlantFeatureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    /**
     * The data needed to update a PlantFeature.
     */
    data: XOR<PlantFeatureUpdateInput, PlantFeatureUncheckedUpdateInput>
    /**
     * Choose, which PlantFeature to update.
     */
    where: PlantFeatureWhereUniqueInput
  }

  /**
   * PlantFeature updateMany
   */
  export type PlantFeatureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlantFeatures.
     */
    data: XOR<PlantFeatureUpdateManyMutationInput, PlantFeatureUncheckedUpdateManyInput>
    /**
     * Filter which PlantFeatures to update
     */
    where?: PlantFeatureWhereInput
    /**
     * Limit how many PlantFeatures to update.
     */
    limit?: number
  }

  /**
   * PlantFeature upsert
   */
  export type PlantFeatureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    /**
     * The filter to search for the PlantFeature to update in case it exists.
     */
    where: PlantFeatureWhereUniqueInput
    /**
     * In case the PlantFeature found by the `where` argument doesn't exist, create a new PlantFeature with this data.
     */
    create: XOR<PlantFeatureCreateInput, PlantFeatureUncheckedCreateInput>
    /**
     * In case the PlantFeature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantFeatureUpdateInput, PlantFeatureUncheckedUpdateInput>
  }

  /**
   * PlantFeature delete
   */
  export type PlantFeatureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
    /**
     * Filter which PlantFeature to delete.
     */
    where: PlantFeatureWhereUniqueInput
  }

  /**
   * PlantFeature deleteMany
   */
  export type PlantFeatureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantFeatures to delete
     */
    where?: PlantFeatureWhereInput
    /**
     * Limit how many PlantFeatures to delete.
     */
    limit?: number
  }

  /**
   * PlantFeature without action
   */
  export type PlantFeatureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantFeature
     */
    select?: PlantFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantFeature
     */
    omit?: PlantFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantFeatureInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    username: 'username',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    address: 'address',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const OTPScalarFieldEnum: {
    email: 'email',
    otp: 'otp',
    expiresAt: 'expiresAt'
  };

  export type OTPScalarFieldEnum = (typeof OTPScalarFieldEnum)[keyof typeof OTPScalarFieldEnum]


  export const PlantCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlantCategoryScalarFieldEnum = (typeof PlantCategoryScalarFieldEnum)[keyof typeof PlantCategoryScalarFieldEnum]


  export const PlantInfoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    scientificName: 'scientificName',
    genus: 'genus',
    imageUrl: 'imageUrl',
    description: 'description',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlantInfoScalarFieldEnum = (typeof PlantInfoScalarFieldEnum)[keyof typeof PlantInfoScalarFieldEnum]


  export const PlantGalleryScalarFieldEnum: {
    id: 'id',
    imageUrl: 'imageUrl',
    plantId: 'plantId'
  };

  export type PlantGalleryScalarFieldEnum = (typeof PlantGalleryScalarFieldEnum)[keyof typeof PlantGalleryScalarFieldEnum]


  export const PlantConditionsScalarFieldEnum: {
    id: 'id',
    temperature: 'temperature',
    sunlight: 'sunlight',
    hardinessZone: 'hardinessZone',
    soil: 'soil',
    growthRate: 'growthRate',
    caution: 'caution',
    plantId: 'plantId'
  };

  export type PlantConditionsScalarFieldEnum = (typeof PlantConditionsScalarFieldEnum)[keyof typeof PlantConditionsScalarFieldEnum]


  export const PlantCareScalarFieldEnum: {
    id: 'id',
    watering: 'watering',
    fertilizer: 'fertilizer',
    pruning: 'pruning',
    propagation: 'propagation',
    repotting: 'repotting',
    humidity: 'humidity',
    plantId: 'plantId'
  };

  export type PlantCareScalarFieldEnum = (typeof PlantCareScalarFieldEnum)[keyof typeof PlantCareScalarFieldEnum]


  export const PlantPestScalarFieldEnum: {
    id: 'id',
    name: 'name',
    plantId: 'plantId'
  };

  export type PlantPestScalarFieldEnum = (typeof PlantPestScalarFieldEnum)[keyof typeof PlantPestScalarFieldEnum]


  export const PlantFeatureScalarFieldEnum: {
    id: 'id',
    detail: 'detail',
    plantId: 'plantId'
  };

  export type PlantFeatureScalarFieldEnum = (typeof PlantFeatureScalarFieldEnum)[keyof typeof PlantFeatureScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const UserOrderByRelevanceFieldEnum: {
    email: 'email',
    password: 'password',
    username: 'username'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const CustomerOrderByRelevanceFieldEnum: {
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone'
  };

  export type CustomerOrderByRelevanceFieldEnum = (typeof CustomerOrderByRelevanceFieldEnum)[keyof typeof CustomerOrderByRelevanceFieldEnum]


  export const AdminOrderByRelevanceFieldEnum: {
    firstName: 'firstName',
    lastName: 'lastName',
    address: 'address',
    phone: 'phone'
  };

  export type AdminOrderByRelevanceFieldEnum = (typeof AdminOrderByRelevanceFieldEnum)[keyof typeof AdminOrderByRelevanceFieldEnum]


  export const OTPOrderByRelevanceFieldEnum: {
    email: 'email',
    otp: 'otp'
  };

  export type OTPOrderByRelevanceFieldEnum = (typeof OTPOrderByRelevanceFieldEnum)[keyof typeof OTPOrderByRelevanceFieldEnum]


  export const PlantCategoryOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    imageUrl: 'imageUrl'
  };

  export type PlantCategoryOrderByRelevanceFieldEnum = (typeof PlantCategoryOrderByRelevanceFieldEnum)[keyof typeof PlantCategoryOrderByRelevanceFieldEnum]


  export const PlantInfoOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    scientificName: 'scientificName',
    genus: 'genus',
    imageUrl: 'imageUrl',
    description: 'description',
    categoryId: 'categoryId'
  };

  export type PlantInfoOrderByRelevanceFieldEnum = (typeof PlantInfoOrderByRelevanceFieldEnum)[keyof typeof PlantInfoOrderByRelevanceFieldEnum]


  export const PlantGalleryOrderByRelevanceFieldEnum: {
    id: 'id',
    imageUrl: 'imageUrl',
    plantId: 'plantId'
  };

  export type PlantGalleryOrderByRelevanceFieldEnum = (typeof PlantGalleryOrderByRelevanceFieldEnum)[keyof typeof PlantGalleryOrderByRelevanceFieldEnum]


  export const PlantConditionsOrderByRelevanceFieldEnum: {
    id: 'id',
    temperature: 'temperature',
    sunlight: 'sunlight',
    hardinessZone: 'hardinessZone',
    soil: 'soil',
    growthRate: 'growthRate',
    caution: 'caution',
    plantId: 'plantId'
  };

  export type PlantConditionsOrderByRelevanceFieldEnum = (typeof PlantConditionsOrderByRelevanceFieldEnum)[keyof typeof PlantConditionsOrderByRelevanceFieldEnum]


  export const PlantCareOrderByRelevanceFieldEnum: {
    id: 'id',
    watering: 'watering',
    fertilizer: 'fertilizer',
    pruning: 'pruning',
    propagation: 'propagation',
    repotting: 'repotting',
    humidity: 'humidity',
    plantId: 'plantId'
  };

  export type PlantCareOrderByRelevanceFieldEnum = (typeof PlantCareOrderByRelevanceFieldEnum)[keyof typeof PlantCareOrderByRelevanceFieldEnum]


  export const PlantPestOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    plantId: 'plantId'
  };

  export type PlantPestOrderByRelevanceFieldEnum = (typeof PlantPestOrderByRelevanceFieldEnum)[keyof typeof PlantPestOrderByRelevanceFieldEnum]


  export const PlantFeatureOrderByRelevanceFieldEnum: {
    id: 'id',
    detail: 'detail',
    plantId: 'plantId'
  };

  export type PlantFeatureOrderByRelevanceFieldEnum = (typeof PlantFeatureOrderByRelevanceFieldEnum)[keyof typeof PlantFeatureOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    admin?: AdminOrderByWithRelationInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: IntFilter<"Customer"> | number
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    phone?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    userId?: IntFilter<"Customer"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: CustomerOrderByRelevanceInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    phone?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Customer"> | number
    firstName?: StringWithAggregatesFilter<"Customer"> | string
    lastName?: StringWithAggregatesFilter<"Customer"> | string
    phone?: StringWithAggregatesFilter<"Customer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    userId?: IntWithAggregatesFilter<"Customer"> | number
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    firstName?: StringFilter<"Admin"> | string
    lastName?: StringFilter<"Admin"> | string
    address?: StringFilter<"Admin"> | string
    phone?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    userId?: IntFilter<"Admin"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AdminOrderByRelevanceInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    firstName?: StringFilter<"Admin"> | string
    lastName?: StringFilter<"Admin"> | string
    address?: StringFilter<"Admin"> | string
    phone?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    firstName?: StringWithAggregatesFilter<"Admin"> | string
    lastName?: StringWithAggregatesFilter<"Admin"> | string
    address?: StringWithAggregatesFilter<"Admin"> | string
    phone?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    userId?: IntWithAggregatesFilter<"Admin"> | number
  }

  export type OTPWhereInput = {
    AND?: OTPWhereInput | OTPWhereInput[]
    OR?: OTPWhereInput[]
    NOT?: OTPWhereInput | OTPWhereInput[]
    email?: StringFilter<"OTP"> | string
    otp?: StringFilter<"OTP"> | string
    expiresAt?: DateTimeFilter<"OTP"> | Date | string
  }

  export type OTPOrderByWithRelationInput = {
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    _relevance?: OTPOrderByRelevanceInput
  }

  export type OTPWhereUniqueInput = Prisma.AtLeast<{
    email?: string
    AND?: OTPWhereInput | OTPWhereInput[]
    OR?: OTPWhereInput[]
    NOT?: OTPWhereInput | OTPWhereInput[]
    otp?: StringFilter<"OTP"> | string
    expiresAt?: DateTimeFilter<"OTP"> | Date | string
  }, "email">

  export type OTPOrderByWithAggregationInput = {
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    _count?: OTPCountOrderByAggregateInput
    _max?: OTPMaxOrderByAggregateInput
    _min?: OTPMinOrderByAggregateInput
  }

  export type OTPScalarWhereWithAggregatesInput = {
    AND?: OTPScalarWhereWithAggregatesInput | OTPScalarWhereWithAggregatesInput[]
    OR?: OTPScalarWhereWithAggregatesInput[]
    NOT?: OTPScalarWhereWithAggregatesInput | OTPScalarWhereWithAggregatesInput[]
    email?: StringWithAggregatesFilter<"OTP"> | string
    otp?: StringWithAggregatesFilter<"OTP"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"OTP"> | Date | string
  }

  export type PlantCategoryWhereInput = {
    AND?: PlantCategoryWhereInput | PlantCategoryWhereInput[]
    OR?: PlantCategoryWhereInput[]
    NOT?: PlantCategoryWhereInput | PlantCategoryWhereInput[]
    id?: StringFilter<"PlantCategory"> | string
    name?: StringFilter<"PlantCategory"> | string
    imageUrl?: StringFilter<"PlantCategory"> | string
    createdAt?: DateTimeFilter<"PlantCategory"> | Date | string
    updatedAt?: DateTimeFilter<"PlantCategory"> | Date | string
    plants?: PlantInfoListRelationFilter
  }

  export type PlantCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    plants?: PlantInfoOrderByRelationAggregateInput
    _relevance?: PlantCategoryOrderByRelevanceInput
  }

  export type PlantCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlantCategoryWhereInput | PlantCategoryWhereInput[]
    OR?: PlantCategoryWhereInput[]
    NOT?: PlantCategoryWhereInput | PlantCategoryWhereInput[]
    name?: StringFilter<"PlantCategory"> | string
    imageUrl?: StringFilter<"PlantCategory"> | string
    createdAt?: DateTimeFilter<"PlantCategory"> | Date | string
    updatedAt?: DateTimeFilter<"PlantCategory"> | Date | string
    plants?: PlantInfoListRelationFilter
  }, "id">

  export type PlantCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlantCategoryCountOrderByAggregateInput
    _max?: PlantCategoryMaxOrderByAggregateInput
    _min?: PlantCategoryMinOrderByAggregateInput
  }

  export type PlantCategoryScalarWhereWithAggregatesInput = {
    AND?: PlantCategoryScalarWhereWithAggregatesInput | PlantCategoryScalarWhereWithAggregatesInput[]
    OR?: PlantCategoryScalarWhereWithAggregatesInput[]
    NOT?: PlantCategoryScalarWhereWithAggregatesInput | PlantCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlantCategory"> | string
    name?: StringWithAggregatesFilter<"PlantCategory"> | string
    imageUrl?: StringWithAggregatesFilter<"PlantCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PlantCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlantCategory"> | Date | string
  }

  export type PlantInfoWhereInput = {
    AND?: PlantInfoWhereInput | PlantInfoWhereInput[]
    OR?: PlantInfoWhereInput[]
    NOT?: PlantInfoWhereInput | PlantInfoWhereInput[]
    id?: StringFilter<"PlantInfo"> | string
    name?: StringFilter<"PlantInfo"> | string
    scientificName?: StringFilter<"PlantInfo"> | string
    genus?: StringFilter<"PlantInfo"> | string
    imageUrl?: StringFilter<"PlantInfo"> | string
    description?: StringFilter<"PlantInfo"> | string
    categoryId?: StringFilter<"PlantInfo"> | string
    createdAt?: DateTimeFilter<"PlantInfo"> | Date | string
    updatedAt?: DateTimeFilter<"PlantInfo"> | Date | string
    category?: XOR<PlantCategoryScalarRelationFilter, PlantCategoryWhereInput>
    galleryImages?: PlantGalleryListRelationFilter
    conditions?: XOR<PlantConditionsNullableScalarRelationFilter, PlantConditionsWhereInput> | null
    careInstructions?: XOR<PlantCareNullableScalarRelationFilter, PlantCareWhereInput> | null
    pests?: PlantPestListRelationFilter
    features?: PlantFeatureListRelationFilter
  }

  export type PlantInfoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    scientificName?: SortOrder
    genus?: SortOrder
    imageUrl?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: PlantCategoryOrderByWithRelationInput
    galleryImages?: PlantGalleryOrderByRelationAggregateInput
    conditions?: PlantConditionsOrderByWithRelationInput
    careInstructions?: PlantCareOrderByWithRelationInput
    pests?: PlantPestOrderByRelationAggregateInput
    features?: PlantFeatureOrderByRelationAggregateInput
    _relevance?: PlantInfoOrderByRelevanceInput
  }

  export type PlantInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlantInfoWhereInput | PlantInfoWhereInput[]
    OR?: PlantInfoWhereInput[]
    NOT?: PlantInfoWhereInput | PlantInfoWhereInput[]
    name?: StringFilter<"PlantInfo"> | string
    scientificName?: StringFilter<"PlantInfo"> | string
    genus?: StringFilter<"PlantInfo"> | string
    imageUrl?: StringFilter<"PlantInfo"> | string
    description?: StringFilter<"PlantInfo"> | string
    categoryId?: StringFilter<"PlantInfo"> | string
    createdAt?: DateTimeFilter<"PlantInfo"> | Date | string
    updatedAt?: DateTimeFilter<"PlantInfo"> | Date | string
    category?: XOR<PlantCategoryScalarRelationFilter, PlantCategoryWhereInput>
    galleryImages?: PlantGalleryListRelationFilter
    conditions?: XOR<PlantConditionsNullableScalarRelationFilter, PlantConditionsWhereInput> | null
    careInstructions?: XOR<PlantCareNullableScalarRelationFilter, PlantCareWhereInput> | null
    pests?: PlantPestListRelationFilter
    features?: PlantFeatureListRelationFilter
  }, "id">

  export type PlantInfoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    scientificName?: SortOrder
    genus?: SortOrder
    imageUrl?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlantInfoCountOrderByAggregateInput
    _max?: PlantInfoMaxOrderByAggregateInput
    _min?: PlantInfoMinOrderByAggregateInput
  }

  export type PlantInfoScalarWhereWithAggregatesInput = {
    AND?: PlantInfoScalarWhereWithAggregatesInput | PlantInfoScalarWhereWithAggregatesInput[]
    OR?: PlantInfoScalarWhereWithAggregatesInput[]
    NOT?: PlantInfoScalarWhereWithAggregatesInput | PlantInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlantInfo"> | string
    name?: StringWithAggregatesFilter<"PlantInfo"> | string
    scientificName?: StringWithAggregatesFilter<"PlantInfo"> | string
    genus?: StringWithAggregatesFilter<"PlantInfo"> | string
    imageUrl?: StringWithAggregatesFilter<"PlantInfo"> | string
    description?: StringWithAggregatesFilter<"PlantInfo"> | string
    categoryId?: StringWithAggregatesFilter<"PlantInfo"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PlantInfo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlantInfo"> | Date | string
  }

  export type PlantGalleryWhereInput = {
    AND?: PlantGalleryWhereInput | PlantGalleryWhereInput[]
    OR?: PlantGalleryWhereInput[]
    NOT?: PlantGalleryWhereInput | PlantGalleryWhereInput[]
    id?: StringFilter<"PlantGallery"> | string
    imageUrl?: StringFilter<"PlantGallery"> | string
    plantId?: StringFilter<"PlantGallery"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }

  export type PlantGalleryOrderByWithRelationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    plantId?: SortOrder
    plant?: PlantInfoOrderByWithRelationInput
    _relevance?: PlantGalleryOrderByRelevanceInput
  }

  export type PlantGalleryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlantGalleryWhereInput | PlantGalleryWhereInput[]
    OR?: PlantGalleryWhereInput[]
    NOT?: PlantGalleryWhereInput | PlantGalleryWhereInput[]
    imageUrl?: StringFilter<"PlantGallery"> | string
    plantId?: StringFilter<"PlantGallery"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }, "id">

  export type PlantGalleryOrderByWithAggregationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    plantId?: SortOrder
    _count?: PlantGalleryCountOrderByAggregateInput
    _max?: PlantGalleryMaxOrderByAggregateInput
    _min?: PlantGalleryMinOrderByAggregateInput
  }

  export type PlantGalleryScalarWhereWithAggregatesInput = {
    AND?: PlantGalleryScalarWhereWithAggregatesInput | PlantGalleryScalarWhereWithAggregatesInput[]
    OR?: PlantGalleryScalarWhereWithAggregatesInput[]
    NOT?: PlantGalleryScalarWhereWithAggregatesInput | PlantGalleryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlantGallery"> | string
    imageUrl?: StringWithAggregatesFilter<"PlantGallery"> | string
    plantId?: StringWithAggregatesFilter<"PlantGallery"> | string
  }

  export type PlantConditionsWhereInput = {
    AND?: PlantConditionsWhereInput | PlantConditionsWhereInput[]
    OR?: PlantConditionsWhereInput[]
    NOT?: PlantConditionsWhereInput | PlantConditionsWhereInput[]
    id?: StringFilter<"PlantConditions"> | string
    temperature?: StringFilter<"PlantConditions"> | string
    sunlight?: StringFilter<"PlantConditions"> | string
    hardinessZone?: StringFilter<"PlantConditions"> | string
    soil?: StringFilter<"PlantConditions"> | string
    growthRate?: StringFilter<"PlantConditions"> | string
    caution?: StringFilter<"PlantConditions"> | string
    plantId?: StringFilter<"PlantConditions"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }

  export type PlantConditionsOrderByWithRelationInput = {
    id?: SortOrder
    temperature?: SortOrder
    sunlight?: SortOrder
    hardinessZone?: SortOrder
    soil?: SortOrder
    growthRate?: SortOrder
    caution?: SortOrder
    plantId?: SortOrder
    plant?: PlantInfoOrderByWithRelationInput
    _relevance?: PlantConditionsOrderByRelevanceInput
  }

  export type PlantConditionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    plantId?: string
    AND?: PlantConditionsWhereInput | PlantConditionsWhereInput[]
    OR?: PlantConditionsWhereInput[]
    NOT?: PlantConditionsWhereInput | PlantConditionsWhereInput[]
    temperature?: StringFilter<"PlantConditions"> | string
    sunlight?: StringFilter<"PlantConditions"> | string
    hardinessZone?: StringFilter<"PlantConditions"> | string
    soil?: StringFilter<"PlantConditions"> | string
    growthRate?: StringFilter<"PlantConditions"> | string
    caution?: StringFilter<"PlantConditions"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }, "id" | "plantId">

  export type PlantConditionsOrderByWithAggregationInput = {
    id?: SortOrder
    temperature?: SortOrder
    sunlight?: SortOrder
    hardinessZone?: SortOrder
    soil?: SortOrder
    growthRate?: SortOrder
    caution?: SortOrder
    plantId?: SortOrder
    _count?: PlantConditionsCountOrderByAggregateInput
    _max?: PlantConditionsMaxOrderByAggregateInput
    _min?: PlantConditionsMinOrderByAggregateInput
  }

  export type PlantConditionsScalarWhereWithAggregatesInput = {
    AND?: PlantConditionsScalarWhereWithAggregatesInput | PlantConditionsScalarWhereWithAggregatesInput[]
    OR?: PlantConditionsScalarWhereWithAggregatesInput[]
    NOT?: PlantConditionsScalarWhereWithAggregatesInput | PlantConditionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlantConditions"> | string
    temperature?: StringWithAggregatesFilter<"PlantConditions"> | string
    sunlight?: StringWithAggregatesFilter<"PlantConditions"> | string
    hardinessZone?: StringWithAggregatesFilter<"PlantConditions"> | string
    soil?: StringWithAggregatesFilter<"PlantConditions"> | string
    growthRate?: StringWithAggregatesFilter<"PlantConditions"> | string
    caution?: StringWithAggregatesFilter<"PlantConditions"> | string
    plantId?: StringWithAggregatesFilter<"PlantConditions"> | string
  }

  export type PlantCareWhereInput = {
    AND?: PlantCareWhereInput | PlantCareWhereInput[]
    OR?: PlantCareWhereInput[]
    NOT?: PlantCareWhereInput | PlantCareWhereInput[]
    id?: StringFilter<"PlantCare"> | string
    watering?: StringFilter<"PlantCare"> | string
    fertilizer?: StringFilter<"PlantCare"> | string
    pruning?: StringFilter<"PlantCare"> | string
    propagation?: StringFilter<"PlantCare"> | string
    repotting?: StringFilter<"PlantCare"> | string
    humidity?: StringFilter<"PlantCare"> | string
    plantId?: StringFilter<"PlantCare"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }

  export type PlantCareOrderByWithRelationInput = {
    id?: SortOrder
    watering?: SortOrder
    fertilizer?: SortOrder
    pruning?: SortOrder
    propagation?: SortOrder
    repotting?: SortOrder
    humidity?: SortOrder
    plantId?: SortOrder
    plant?: PlantInfoOrderByWithRelationInput
    _relevance?: PlantCareOrderByRelevanceInput
  }

  export type PlantCareWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    plantId?: string
    AND?: PlantCareWhereInput | PlantCareWhereInput[]
    OR?: PlantCareWhereInput[]
    NOT?: PlantCareWhereInput | PlantCareWhereInput[]
    watering?: StringFilter<"PlantCare"> | string
    fertilizer?: StringFilter<"PlantCare"> | string
    pruning?: StringFilter<"PlantCare"> | string
    propagation?: StringFilter<"PlantCare"> | string
    repotting?: StringFilter<"PlantCare"> | string
    humidity?: StringFilter<"PlantCare"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }, "id" | "plantId">

  export type PlantCareOrderByWithAggregationInput = {
    id?: SortOrder
    watering?: SortOrder
    fertilizer?: SortOrder
    pruning?: SortOrder
    propagation?: SortOrder
    repotting?: SortOrder
    humidity?: SortOrder
    plantId?: SortOrder
    _count?: PlantCareCountOrderByAggregateInput
    _max?: PlantCareMaxOrderByAggregateInput
    _min?: PlantCareMinOrderByAggregateInput
  }

  export type PlantCareScalarWhereWithAggregatesInput = {
    AND?: PlantCareScalarWhereWithAggregatesInput | PlantCareScalarWhereWithAggregatesInput[]
    OR?: PlantCareScalarWhereWithAggregatesInput[]
    NOT?: PlantCareScalarWhereWithAggregatesInput | PlantCareScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlantCare"> | string
    watering?: StringWithAggregatesFilter<"PlantCare"> | string
    fertilizer?: StringWithAggregatesFilter<"PlantCare"> | string
    pruning?: StringWithAggregatesFilter<"PlantCare"> | string
    propagation?: StringWithAggregatesFilter<"PlantCare"> | string
    repotting?: StringWithAggregatesFilter<"PlantCare"> | string
    humidity?: StringWithAggregatesFilter<"PlantCare"> | string
    plantId?: StringWithAggregatesFilter<"PlantCare"> | string
  }

  export type PlantPestWhereInput = {
    AND?: PlantPestWhereInput | PlantPestWhereInput[]
    OR?: PlantPestWhereInput[]
    NOT?: PlantPestWhereInput | PlantPestWhereInput[]
    id?: StringFilter<"PlantPest"> | string
    name?: StringFilter<"PlantPest"> | string
    plantId?: StringFilter<"PlantPest"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }

  export type PlantPestOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
    plant?: PlantInfoOrderByWithRelationInput
    _relevance?: PlantPestOrderByRelevanceInput
  }

  export type PlantPestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlantPestWhereInput | PlantPestWhereInput[]
    OR?: PlantPestWhereInput[]
    NOT?: PlantPestWhereInput | PlantPestWhereInput[]
    name?: StringFilter<"PlantPest"> | string
    plantId?: StringFilter<"PlantPest"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }, "id">

  export type PlantPestOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
    _count?: PlantPestCountOrderByAggregateInput
    _max?: PlantPestMaxOrderByAggregateInput
    _min?: PlantPestMinOrderByAggregateInput
  }

  export type PlantPestScalarWhereWithAggregatesInput = {
    AND?: PlantPestScalarWhereWithAggregatesInput | PlantPestScalarWhereWithAggregatesInput[]
    OR?: PlantPestScalarWhereWithAggregatesInput[]
    NOT?: PlantPestScalarWhereWithAggregatesInput | PlantPestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlantPest"> | string
    name?: StringWithAggregatesFilter<"PlantPest"> | string
    plantId?: StringWithAggregatesFilter<"PlantPest"> | string
  }

  export type PlantFeatureWhereInput = {
    AND?: PlantFeatureWhereInput | PlantFeatureWhereInput[]
    OR?: PlantFeatureWhereInput[]
    NOT?: PlantFeatureWhereInput | PlantFeatureWhereInput[]
    id?: StringFilter<"PlantFeature"> | string
    detail?: StringFilter<"PlantFeature"> | string
    plantId?: StringFilter<"PlantFeature"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }

  export type PlantFeatureOrderByWithRelationInput = {
    id?: SortOrder
    detail?: SortOrder
    plantId?: SortOrder
    plant?: PlantInfoOrderByWithRelationInput
    _relevance?: PlantFeatureOrderByRelevanceInput
  }

  export type PlantFeatureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlantFeatureWhereInput | PlantFeatureWhereInput[]
    OR?: PlantFeatureWhereInput[]
    NOT?: PlantFeatureWhereInput | PlantFeatureWhereInput[]
    detail?: StringFilter<"PlantFeature"> | string
    plantId?: StringFilter<"PlantFeature"> | string
    plant?: XOR<PlantInfoScalarRelationFilter, PlantInfoWhereInput>
  }, "id">

  export type PlantFeatureOrderByWithAggregationInput = {
    id?: SortOrder
    detail?: SortOrder
    plantId?: SortOrder
    _count?: PlantFeatureCountOrderByAggregateInput
    _max?: PlantFeatureMaxOrderByAggregateInput
    _min?: PlantFeatureMinOrderByAggregateInput
  }

  export type PlantFeatureScalarWhereWithAggregatesInput = {
    AND?: PlantFeatureScalarWhereWithAggregatesInput | PlantFeatureScalarWhereWithAggregatesInput[]
    OR?: PlantFeatureScalarWhereWithAggregatesInput[]
    NOT?: PlantFeatureScalarWhereWithAggregatesInput | PlantFeatureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlantFeature"> | string
    detail?: StringWithAggregatesFilter<"PlantFeature"> | string
    plantId?: StringWithAggregatesFilter<"PlantFeature"> | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    username: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    username: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    username: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    firstName: string
    lastName: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type CustomerUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type CustomerUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateInput = {
    firstName: string
    lastName: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type AdminUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type AdminUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type OTPCreateInput = {
    email: string
    otp: string
    expiresAt: Date | string
  }

  export type OTPUncheckedCreateInput = {
    email: string
    otp: string
    expiresAt: Date | string
  }

  export type OTPUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPCreateManyInput = {
    email: string
    otp: string
    expiresAt: Date | string
  }

  export type OTPUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantCategoryCreateInput = {
    id?: string
    name: string
    imageUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    plants?: PlantInfoCreateNestedManyWithoutCategoryInput
  }

  export type PlantCategoryUncheckedCreateInput = {
    id?: string
    name: string
    imageUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    plants?: PlantInfoUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type PlantCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plants?: PlantInfoUpdateManyWithoutCategoryNestedInput
  }

  export type PlantCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plants?: PlantInfoUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type PlantCategoryCreateManyInput = {
    id?: string
    name: string
    imageUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlantCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantInfoCreateInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: PlantCategoryCreateNestedOneWithoutPlantsInput
    galleryImages?: PlantGalleryCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareCreateNestedOneWithoutPlantInput
    pests?: PlantPestCreateNestedManyWithoutPlantInput
    features?: PlantFeatureCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoUncheckedCreateInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    galleryImages?: PlantGalleryUncheckedCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsUncheckedCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareUncheckedCreateNestedOneWithoutPlantInput
    pests?: PlantPestUncheckedCreateNestedManyWithoutPlantInput
    features?: PlantFeatureUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: PlantCategoryUpdateOneRequiredWithoutPlantsNestedInput
    galleryImages?: PlantGalleryUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    galleryImages?: PlantGalleryUncheckedUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUncheckedUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUncheckedUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUncheckedUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoCreateManyInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlantInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantGalleryCreateInput = {
    id?: string
    imageUrl: string
    plant: PlantInfoCreateNestedOneWithoutGalleryImagesInput
  }

  export type PlantGalleryUncheckedCreateInput = {
    id?: string
    imageUrl: string
    plantId: string
  }

  export type PlantGalleryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    plant?: PlantInfoUpdateOneRequiredWithoutGalleryImagesNestedInput
  }

  export type PlantGalleryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantGalleryCreateManyInput = {
    id?: string
    imageUrl: string
    plantId: string
  }

  export type PlantGalleryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type PlantGalleryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantConditionsCreateInput = {
    id?: string
    temperature: string
    sunlight: string
    hardinessZone: string
    soil: string
    growthRate: string
    caution: string
    plant: PlantInfoCreateNestedOneWithoutConditionsInput
  }

  export type PlantConditionsUncheckedCreateInput = {
    id?: string
    temperature: string
    sunlight: string
    hardinessZone: string
    soil: string
    growthRate: string
    caution: string
    plantId: string
  }

  export type PlantConditionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    temperature?: StringFieldUpdateOperationsInput | string
    sunlight?: StringFieldUpdateOperationsInput | string
    hardinessZone?: StringFieldUpdateOperationsInput | string
    soil?: StringFieldUpdateOperationsInput | string
    growthRate?: StringFieldUpdateOperationsInput | string
    caution?: StringFieldUpdateOperationsInput | string
    plant?: PlantInfoUpdateOneRequiredWithoutConditionsNestedInput
  }

  export type PlantConditionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    temperature?: StringFieldUpdateOperationsInput | string
    sunlight?: StringFieldUpdateOperationsInput | string
    hardinessZone?: StringFieldUpdateOperationsInput | string
    soil?: StringFieldUpdateOperationsInput | string
    growthRate?: StringFieldUpdateOperationsInput | string
    caution?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantConditionsCreateManyInput = {
    id?: string
    temperature: string
    sunlight: string
    hardinessZone: string
    soil: string
    growthRate: string
    caution: string
    plantId: string
  }

  export type PlantConditionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    temperature?: StringFieldUpdateOperationsInput | string
    sunlight?: StringFieldUpdateOperationsInput | string
    hardinessZone?: StringFieldUpdateOperationsInput | string
    soil?: StringFieldUpdateOperationsInput | string
    growthRate?: StringFieldUpdateOperationsInput | string
    caution?: StringFieldUpdateOperationsInput | string
  }

  export type PlantConditionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    temperature?: StringFieldUpdateOperationsInput | string
    sunlight?: StringFieldUpdateOperationsInput | string
    hardinessZone?: StringFieldUpdateOperationsInput | string
    soil?: StringFieldUpdateOperationsInput | string
    growthRate?: StringFieldUpdateOperationsInput | string
    caution?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantCareCreateInput = {
    id?: string
    watering: string
    fertilizer: string
    pruning: string
    propagation: string
    repotting: string
    humidity: string
    plant: PlantInfoCreateNestedOneWithoutCareInstructionsInput
  }

  export type PlantCareUncheckedCreateInput = {
    id?: string
    watering: string
    fertilizer: string
    pruning: string
    propagation: string
    repotting: string
    humidity: string
    plantId: string
  }

  export type PlantCareUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    watering?: StringFieldUpdateOperationsInput | string
    fertilizer?: StringFieldUpdateOperationsInput | string
    pruning?: StringFieldUpdateOperationsInput | string
    propagation?: StringFieldUpdateOperationsInput | string
    repotting?: StringFieldUpdateOperationsInput | string
    humidity?: StringFieldUpdateOperationsInput | string
    plant?: PlantInfoUpdateOneRequiredWithoutCareInstructionsNestedInput
  }

  export type PlantCareUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    watering?: StringFieldUpdateOperationsInput | string
    fertilizer?: StringFieldUpdateOperationsInput | string
    pruning?: StringFieldUpdateOperationsInput | string
    propagation?: StringFieldUpdateOperationsInput | string
    repotting?: StringFieldUpdateOperationsInput | string
    humidity?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantCareCreateManyInput = {
    id?: string
    watering: string
    fertilizer: string
    pruning: string
    propagation: string
    repotting: string
    humidity: string
    plantId: string
  }

  export type PlantCareUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    watering?: StringFieldUpdateOperationsInput | string
    fertilizer?: StringFieldUpdateOperationsInput | string
    pruning?: StringFieldUpdateOperationsInput | string
    propagation?: StringFieldUpdateOperationsInput | string
    repotting?: StringFieldUpdateOperationsInput | string
    humidity?: StringFieldUpdateOperationsInput | string
  }

  export type PlantCareUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    watering?: StringFieldUpdateOperationsInput | string
    fertilizer?: StringFieldUpdateOperationsInput | string
    pruning?: StringFieldUpdateOperationsInput | string
    propagation?: StringFieldUpdateOperationsInput | string
    repotting?: StringFieldUpdateOperationsInput | string
    humidity?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantPestCreateInput = {
    id?: string
    name: string
    plant: PlantInfoCreateNestedOneWithoutPestsInput
  }

  export type PlantPestUncheckedCreateInput = {
    id?: string
    name: string
    plantId: string
  }

  export type PlantPestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    plant?: PlantInfoUpdateOneRequiredWithoutPestsNestedInput
  }

  export type PlantPestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantPestCreateManyInput = {
    id?: string
    name: string
    plantId: string
  }

  export type PlantPestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantPestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantFeatureCreateInput = {
    id?: string
    detail: string
    plant: PlantInfoCreateNestedOneWithoutFeaturesInput
  }

  export type PlantFeatureUncheckedCreateInput = {
    id?: string
    detail: string
    plantId: string
  }

  export type PlantFeatureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    plant?: PlantInfoUpdateOneRequiredWithoutFeaturesNestedInput
  }

  export type PlantFeatureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantFeatureCreateManyInput = {
    id?: string
    detail: string
    plantId: string
  }

  export type PlantFeatureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
  }

  export type PlantFeatureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    plantId?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CustomerNullableScalarRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type AdminNullableScalarRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CustomerOrderByRelevanceInput = {
    fields: CustomerOrderByRelevanceFieldEnum | CustomerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AdminOrderByRelevanceInput = {
    fields: AdminOrderByRelevanceFieldEnum | AdminOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type OTPOrderByRelevanceInput = {
    fields: OTPOrderByRelevanceFieldEnum | OTPOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OTPCountOrderByAggregateInput = {
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
  }

  export type OTPMaxOrderByAggregateInput = {
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
  }

  export type OTPMinOrderByAggregateInput = {
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
  }

  export type PlantInfoListRelationFilter = {
    every?: PlantInfoWhereInput
    some?: PlantInfoWhereInput
    none?: PlantInfoWhereInput
  }

  export type PlantInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlantCategoryOrderByRelevanceInput = {
    fields: PlantCategoryOrderByRelevanceFieldEnum | PlantCategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlantCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlantCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlantCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlantCategoryScalarRelationFilter = {
    is?: PlantCategoryWhereInput
    isNot?: PlantCategoryWhereInput
  }

  export type PlantGalleryListRelationFilter = {
    every?: PlantGalleryWhereInput
    some?: PlantGalleryWhereInput
    none?: PlantGalleryWhereInput
  }

  export type PlantConditionsNullableScalarRelationFilter = {
    is?: PlantConditionsWhereInput | null
    isNot?: PlantConditionsWhereInput | null
  }

  export type PlantCareNullableScalarRelationFilter = {
    is?: PlantCareWhereInput | null
    isNot?: PlantCareWhereInput | null
  }

  export type PlantPestListRelationFilter = {
    every?: PlantPestWhereInput
    some?: PlantPestWhereInput
    none?: PlantPestWhereInput
  }

  export type PlantFeatureListRelationFilter = {
    every?: PlantFeatureWhereInput
    some?: PlantFeatureWhereInput
    none?: PlantFeatureWhereInput
  }

  export type PlantGalleryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlantPestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlantFeatureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlantInfoOrderByRelevanceInput = {
    fields: PlantInfoOrderByRelevanceFieldEnum | PlantInfoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlantInfoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    scientificName?: SortOrder
    genus?: SortOrder
    imageUrl?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlantInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    scientificName?: SortOrder
    genus?: SortOrder
    imageUrl?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlantInfoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    scientificName?: SortOrder
    genus?: SortOrder
    imageUrl?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlantInfoScalarRelationFilter = {
    is?: PlantInfoWhereInput
    isNot?: PlantInfoWhereInput
  }

  export type PlantGalleryOrderByRelevanceInput = {
    fields: PlantGalleryOrderByRelevanceFieldEnum | PlantGalleryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlantGalleryCountOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    plantId?: SortOrder
  }

  export type PlantGalleryMaxOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    plantId?: SortOrder
  }

  export type PlantGalleryMinOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    plantId?: SortOrder
  }

  export type PlantConditionsOrderByRelevanceInput = {
    fields: PlantConditionsOrderByRelevanceFieldEnum | PlantConditionsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlantConditionsCountOrderByAggregateInput = {
    id?: SortOrder
    temperature?: SortOrder
    sunlight?: SortOrder
    hardinessZone?: SortOrder
    soil?: SortOrder
    growthRate?: SortOrder
    caution?: SortOrder
    plantId?: SortOrder
  }

  export type PlantConditionsMaxOrderByAggregateInput = {
    id?: SortOrder
    temperature?: SortOrder
    sunlight?: SortOrder
    hardinessZone?: SortOrder
    soil?: SortOrder
    growthRate?: SortOrder
    caution?: SortOrder
    plantId?: SortOrder
  }

  export type PlantConditionsMinOrderByAggregateInput = {
    id?: SortOrder
    temperature?: SortOrder
    sunlight?: SortOrder
    hardinessZone?: SortOrder
    soil?: SortOrder
    growthRate?: SortOrder
    caution?: SortOrder
    plantId?: SortOrder
  }

  export type PlantCareOrderByRelevanceInput = {
    fields: PlantCareOrderByRelevanceFieldEnum | PlantCareOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlantCareCountOrderByAggregateInput = {
    id?: SortOrder
    watering?: SortOrder
    fertilizer?: SortOrder
    pruning?: SortOrder
    propagation?: SortOrder
    repotting?: SortOrder
    humidity?: SortOrder
    plantId?: SortOrder
  }

  export type PlantCareMaxOrderByAggregateInput = {
    id?: SortOrder
    watering?: SortOrder
    fertilizer?: SortOrder
    pruning?: SortOrder
    propagation?: SortOrder
    repotting?: SortOrder
    humidity?: SortOrder
    plantId?: SortOrder
  }

  export type PlantCareMinOrderByAggregateInput = {
    id?: SortOrder
    watering?: SortOrder
    fertilizer?: SortOrder
    pruning?: SortOrder
    propagation?: SortOrder
    repotting?: SortOrder
    humidity?: SortOrder
    plantId?: SortOrder
  }

  export type PlantPestOrderByRelevanceInput = {
    fields: PlantPestOrderByRelevanceFieldEnum | PlantPestOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlantPestCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
  }

  export type PlantPestMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
  }

  export type PlantPestMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
  }

  export type PlantFeatureOrderByRelevanceInput = {
    fields: PlantFeatureOrderByRelevanceFieldEnum | PlantFeatureOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlantFeatureCountOrderByAggregateInput = {
    id?: SortOrder
    detail?: SortOrder
    plantId?: SortOrder
  }

  export type PlantFeatureMaxOrderByAggregateInput = {
    id?: SortOrder
    detail?: SortOrder
    plantId?: SortOrder
  }

  export type PlantFeatureMinOrderByAggregateInput = {
    id?: SortOrder
    detail?: SortOrder
    plantId?: SortOrder
  }

  export type CustomerCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    connect?: CustomerWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type CustomerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    connect?: CustomerWhereUniqueInput
  }

  export type AdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CustomerUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    upsert?: CustomerUpsertWithoutUserInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutUserInput, CustomerUpdateWithoutUserInput>, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CustomerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    upsert?: CustomerUpsertWithoutUserInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutUserInput, CustomerUpdateWithoutUserInput>, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type AdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutCustomerInput = {
    create?: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCustomerNestedInput = {
    create?: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerInput
    upsert?: UserUpsertWithoutCustomerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustomerInput, UserUpdateWithoutCustomerInput>, UserUncheckedUpdateWithoutCustomerInput>
  }

  export type UserCreateNestedOneWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    upsert?: UserUpsertWithoutAdminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminInput, UserUpdateWithoutAdminInput>, UserUncheckedUpdateWithoutAdminInput>
  }

  export type PlantInfoCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PlantInfoCreateWithoutCategoryInput, PlantInfoUncheckedCreateWithoutCategoryInput> | PlantInfoCreateWithoutCategoryInput[] | PlantInfoUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PlantInfoCreateOrConnectWithoutCategoryInput | PlantInfoCreateOrConnectWithoutCategoryInput[]
    createMany?: PlantInfoCreateManyCategoryInputEnvelope
    connect?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
  }

  export type PlantInfoUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PlantInfoCreateWithoutCategoryInput, PlantInfoUncheckedCreateWithoutCategoryInput> | PlantInfoCreateWithoutCategoryInput[] | PlantInfoUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PlantInfoCreateOrConnectWithoutCategoryInput | PlantInfoCreateOrConnectWithoutCategoryInput[]
    createMany?: PlantInfoCreateManyCategoryInputEnvelope
    connect?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
  }

  export type PlantInfoUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PlantInfoCreateWithoutCategoryInput, PlantInfoUncheckedCreateWithoutCategoryInput> | PlantInfoCreateWithoutCategoryInput[] | PlantInfoUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PlantInfoCreateOrConnectWithoutCategoryInput | PlantInfoCreateOrConnectWithoutCategoryInput[]
    upsert?: PlantInfoUpsertWithWhereUniqueWithoutCategoryInput | PlantInfoUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PlantInfoCreateManyCategoryInputEnvelope
    set?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
    disconnect?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
    delete?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
    connect?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
    update?: PlantInfoUpdateWithWhereUniqueWithoutCategoryInput | PlantInfoUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PlantInfoUpdateManyWithWhereWithoutCategoryInput | PlantInfoUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PlantInfoScalarWhereInput | PlantInfoScalarWhereInput[]
  }

  export type PlantInfoUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PlantInfoCreateWithoutCategoryInput, PlantInfoUncheckedCreateWithoutCategoryInput> | PlantInfoCreateWithoutCategoryInput[] | PlantInfoUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PlantInfoCreateOrConnectWithoutCategoryInput | PlantInfoCreateOrConnectWithoutCategoryInput[]
    upsert?: PlantInfoUpsertWithWhereUniqueWithoutCategoryInput | PlantInfoUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PlantInfoCreateManyCategoryInputEnvelope
    set?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
    disconnect?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
    delete?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
    connect?: PlantInfoWhereUniqueInput | PlantInfoWhereUniqueInput[]
    update?: PlantInfoUpdateWithWhereUniqueWithoutCategoryInput | PlantInfoUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PlantInfoUpdateManyWithWhereWithoutCategoryInput | PlantInfoUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PlantInfoScalarWhereInput | PlantInfoScalarWhereInput[]
  }

  export type PlantCategoryCreateNestedOneWithoutPlantsInput = {
    create?: XOR<PlantCategoryCreateWithoutPlantsInput, PlantCategoryUncheckedCreateWithoutPlantsInput>
    connectOrCreate?: PlantCategoryCreateOrConnectWithoutPlantsInput
    connect?: PlantCategoryWhereUniqueInput
  }

  export type PlantGalleryCreateNestedManyWithoutPlantInput = {
    create?: XOR<PlantGalleryCreateWithoutPlantInput, PlantGalleryUncheckedCreateWithoutPlantInput> | PlantGalleryCreateWithoutPlantInput[] | PlantGalleryUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantGalleryCreateOrConnectWithoutPlantInput | PlantGalleryCreateOrConnectWithoutPlantInput[]
    createMany?: PlantGalleryCreateManyPlantInputEnvelope
    connect?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
  }

  export type PlantConditionsCreateNestedOneWithoutPlantInput = {
    create?: XOR<PlantConditionsCreateWithoutPlantInput, PlantConditionsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantConditionsCreateOrConnectWithoutPlantInput
    connect?: PlantConditionsWhereUniqueInput
  }

  export type PlantCareCreateNestedOneWithoutPlantInput = {
    create?: XOR<PlantCareCreateWithoutPlantInput, PlantCareUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantCareCreateOrConnectWithoutPlantInput
    connect?: PlantCareWhereUniqueInput
  }

  export type PlantPestCreateNestedManyWithoutPlantInput = {
    create?: XOR<PlantPestCreateWithoutPlantInput, PlantPestUncheckedCreateWithoutPlantInput> | PlantPestCreateWithoutPlantInput[] | PlantPestUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantPestCreateOrConnectWithoutPlantInput | PlantPestCreateOrConnectWithoutPlantInput[]
    createMany?: PlantPestCreateManyPlantInputEnvelope
    connect?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
  }

  export type PlantFeatureCreateNestedManyWithoutPlantInput = {
    create?: XOR<PlantFeatureCreateWithoutPlantInput, PlantFeatureUncheckedCreateWithoutPlantInput> | PlantFeatureCreateWithoutPlantInput[] | PlantFeatureUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantFeatureCreateOrConnectWithoutPlantInput | PlantFeatureCreateOrConnectWithoutPlantInput[]
    createMany?: PlantFeatureCreateManyPlantInputEnvelope
    connect?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
  }

  export type PlantGalleryUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<PlantGalleryCreateWithoutPlantInput, PlantGalleryUncheckedCreateWithoutPlantInput> | PlantGalleryCreateWithoutPlantInput[] | PlantGalleryUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantGalleryCreateOrConnectWithoutPlantInput | PlantGalleryCreateOrConnectWithoutPlantInput[]
    createMany?: PlantGalleryCreateManyPlantInputEnvelope
    connect?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
  }

  export type PlantConditionsUncheckedCreateNestedOneWithoutPlantInput = {
    create?: XOR<PlantConditionsCreateWithoutPlantInput, PlantConditionsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantConditionsCreateOrConnectWithoutPlantInput
    connect?: PlantConditionsWhereUniqueInput
  }

  export type PlantCareUncheckedCreateNestedOneWithoutPlantInput = {
    create?: XOR<PlantCareCreateWithoutPlantInput, PlantCareUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantCareCreateOrConnectWithoutPlantInput
    connect?: PlantCareWhereUniqueInput
  }

  export type PlantPestUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<PlantPestCreateWithoutPlantInput, PlantPestUncheckedCreateWithoutPlantInput> | PlantPestCreateWithoutPlantInput[] | PlantPestUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantPestCreateOrConnectWithoutPlantInput | PlantPestCreateOrConnectWithoutPlantInput[]
    createMany?: PlantPestCreateManyPlantInputEnvelope
    connect?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
  }

  export type PlantFeatureUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<PlantFeatureCreateWithoutPlantInput, PlantFeatureUncheckedCreateWithoutPlantInput> | PlantFeatureCreateWithoutPlantInput[] | PlantFeatureUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantFeatureCreateOrConnectWithoutPlantInput | PlantFeatureCreateOrConnectWithoutPlantInput[]
    createMany?: PlantFeatureCreateManyPlantInputEnvelope
    connect?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
  }

  export type PlantCategoryUpdateOneRequiredWithoutPlantsNestedInput = {
    create?: XOR<PlantCategoryCreateWithoutPlantsInput, PlantCategoryUncheckedCreateWithoutPlantsInput>
    connectOrCreate?: PlantCategoryCreateOrConnectWithoutPlantsInput
    upsert?: PlantCategoryUpsertWithoutPlantsInput
    connect?: PlantCategoryWhereUniqueInput
    update?: XOR<XOR<PlantCategoryUpdateToOneWithWhereWithoutPlantsInput, PlantCategoryUpdateWithoutPlantsInput>, PlantCategoryUncheckedUpdateWithoutPlantsInput>
  }

  export type PlantGalleryUpdateManyWithoutPlantNestedInput = {
    create?: XOR<PlantGalleryCreateWithoutPlantInput, PlantGalleryUncheckedCreateWithoutPlantInput> | PlantGalleryCreateWithoutPlantInput[] | PlantGalleryUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantGalleryCreateOrConnectWithoutPlantInput | PlantGalleryCreateOrConnectWithoutPlantInput[]
    upsert?: PlantGalleryUpsertWithWhereUniqueWithoutPlantInput | PlantGalleryUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: PlantGalleryCreateManyPlantInputEnvelope
    set?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
    disconnect?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
    delete?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
    connect?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
    update?: PlantGalleryUpdateWithWhereUniqueWithoutPlantInput | PlantGalleryUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: PlantGalleryUpdateManyWithWhereWithoutPlantInput | PlantGalleryUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: PlantGalleryScalarWhereInput | PlantGalleryScalarWhereInput[]
  }

  export type PlantConditionsUpdateOneWithoutPlantNestedInput = {
    create?: XOR<PlantConditionsCreateWithoutPlantInput, PlantConditionsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantConditionsCreateOrConnectWithoutPlantInput
    upsert?: PlantConditionsUpsertWithoutPlantInput
    disconnect?: PlantConditionsWhereInput | boolean
    delete?: PlantConditionsWhereInput | boolean
    connect?: PlantConditionsWhereUniqueInput
    update?: XOR<XOR<PlantConditionsUpdateToOneWithWhereWithoutPlantInput, PlantConditionsUpdateWithoutPlantInput>, PlantConditionsUncheckedUpdateWithoutPlantInput>
  }

  export type PlantCareUpdateOneWithoutPlantNestedInput = {
    create?: XOR<PlantCareCreateWithoutPlantInput, PlantCareUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantCareCreateOrConnectWithoutPlantInput
    upsert?: PlantCareUpsertWithoutPlantInput
    disconnect?: PlantCareWhereInput | boolean
    delete?: PlantCareWhereInput | boolean
    connect?: PlantCareWhereUniqueInput
    update?: XOR<XOR<PlantCareUpdateToOneWithWhereWithoutPlantInput, PlantCareUpdateWithoutPlantInput>, PlantCareUncheckedUpdateWithoutPlantInput>
  }

  export type PlantPestUpdateManyWithoutPlantNestedInput = {
    create?: XOR<PlantPestCreateWithoutPlantInput, PlantPestUncheckedCreateWithoutPlantInput> | PlantPestCreateWithoutPlantInput[] | PlantPestUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantPestCreateOrConnectWithoutPlantInput | PlantPestCreateOrConnectWithoutPlantInput[]
    upsert?: PlantPestUpsertWithWhereUniqueWithoutPlantInput | PlantPestUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: PlantPestCreateManyPlantInputEnvelope
    set?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
    disconnect?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
    delete?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
    connect?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
    update?: PlantPestUpdateWithWhereUniqueWithoutPlantInput | PlantPestUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: PlantPestUpdateManyWithWhereWithoutPlantInput | PlantPestUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: PlantPestScalarWhereInput | PlantPestScalarWhereInput[]
  }

  export type PlantFeatureUpdateManyWithoutPlantNestedInput = {
    create?: XOR<PlantFeatureCreateWithoutPlantInput, PlantFeatureUncheckedCreateWithoutPlantInput> | PlantFeatureCreateWithoutPlantInput[] | PlantFeatureUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantFeatureCreateOrConnectWithoutPlantInput | PlantFeatureCreateOrConnectWithoutPlantInput[]
    upsert?: PlantFeatureUpsertWithWhereUniqueWithoutPlantInput | PlantFeatureUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: PlantFeatureCreateManyPlantInputEnvelope
    set?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
    disconnect?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
    delete?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
    connect?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
    update?: PlantFeatureUpdateWithWhereUniqueWithoutPlantInput | PlantFeatureUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: PlantFeatureUpdateManyWithWhereWithoutPlantInput | PlantFeatureUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: PlantFeatureScalarWhereInput | PlantFeatureScalarWhereInput[]
  }

  export type PlantGalleryUncheckedUpdateManyWithoutPlantNestedInput = {
    create?: XOR<PlantGalleryCreateWithoutPlantInput, PlantGalleryUncheckedCreateWithoutPlantInput> | PlantGalleryCreateWithoutPlantInput[] | PlantGalleryUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantGalleryCreateOrConnectWithoutPlantInput | PlantGalleryCreateOrConnectWithoutPlantInput[]
    upsert?: PlantGalleryUpsertWithWhereUniqueWithoutPlantInput | PlantGalleryUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: PlantGalleryCreateManyPlantInputEnvelope
    set?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
    disconnect?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
    delete?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
    connect?: PlantGalleryWhereUniqueInput | PlantGalleryWhereUniqueInput[]
    update?: PlantGalleryUpdateWithWhereUniqueWithoutPlantInput | PlantGalleryUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: PlantGalleryUpdateManyWithWhereWithoutPlantInput | PlantGalleryUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: PlantGalleryScalarWhereInput | PlantGalleryScalarWhereInput[]
  }

  export type PlantConditionsUncheckedUpdateOneWithoutPlantNestedInput = {
    create?: XOR<PlantConditionsCreateWithoutPlantInput, PlantConditionsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantConditionsCreateOrConnectWithoutPlantInput
    upsert?: PlantConditionsUpsertWithoutPlantInput
    disconnect?: PlantConditionsWhereInput | boolean
    delete?: PlantConditionsWhereInput | boolean
    connect?: PlantConditionsWhereUniqueInput
    update?: XOR<XOR<PlantConditionsUpdateToOneWithWhereWithoutPlantInput, PlantConditionsUpdateWithoutPlantInput>, PlantConditionsUncheckedUpdateWithoutPlantInput>
  }

  export type PlantCareUncheckedUpdateOneWithoutPlantNestedInput = {
    create?: XOR<PlantCareCreateWithoutPlantInput, PlantCareUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantCareCreateOrConnectWithoutPlantInput
    upsert?: PlantCareUpsertWithoutPlantInput
    disconnect?: PlantCareWhereInput | boolean
    delete?: PlantCareWhereInput | boolean
    connect?: PlantCareWhereUniqueInput
    update?: XOR<XOR<PlantCareUpdateToOneWithWhereWithoutPlantInput, PlantCareUpdateWithoutPlantInput>, PlantCareUncheckedUpdateWithoutPlantInput>
  }

  export type PlantPestUncheckedUpdateManyWithoutPlantNestedInput = {
    create?: XOR<PlantPestCreateWithoutPlantInput, PlantPestUncheckedCreateWithoutPlantInput> | PlantPestCreateWithoutPlantInput[] | PlantPestUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantPestCreateOrConnectWithoutPlantInput | PlantPestCreateOrConnectWithoutPlantInput[]
    upsert?: PlantPestUpsertWithWhereUniqueWithoutPlantInput | PlantPestUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: PlantPestCreateManyPlantInputEnvelope
    set?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
    disconnect?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
    delete?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
    connect?: PlantPestWhereUniqueInput | PlantPestWhereUniqueInput[]
    update?: PlantPestUpdateWithWhereUniqueWithoutPlantInput | PlantPestUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: PlantPestUpdateManyWithWhereWithoutPlantInput | PlantPestUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: PlantPestScalarWhereInput | PlantPestScalarWhereInput[]
  }

  export type PlantFeatureUncheckedUpdateManyWithoutPlantNestedInput = {
    create?: XOR<PlantFeatureCreateWithoutPlantInput, PlantFeatureUncheckedCreateWithoutPlantInput> | PlantFeatureCreateWithoutPlantInput[] | PlantFeatureUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: PlantFeatureCreateOrConnectWithoutPlantInput | PlantFeatureCreateOrConnectWithoutPlantInput[]
    upsert?: PlantFeatureUpsertWithWhereUniqueWithoutPlantInput | PlantFeatureUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: PlantFeatureCreateManyPlantInputEnvelope
    set?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
    disconnect?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
    delete?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
    connect?: PlantFeatureWhereUniqueInput | PlantFeatureWhereUniqueInput[]
    update?: PlantFeatureUpdateWithWhereUniqueWithoutPlantInput | PlantFeatureUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: PlantFeatureUpdateManyWithWhereWithoutPlantInput | PlantFeatureUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: PlantFeatureScalarWhereInput | PlantFeatureScalarWhereInput[]
  }

  export type PlantInfoCreateNestedOneWithoutGalleryImagesInput = {
    create?: XOR<PlantInfoCreateWithoutGalleryImagesInput, PlantInfoUncheckedCreateWithoutGalleryImagesInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutGalleryImagesInput
    connect?: PlantInfoWhereUniqueInput
  }

  export type PlantInfoUpdateOneRequiredWithoutGalleryImagesNestedInput = {
    create?: XOR<PlantInfoCreateWithoutGalleryImagesInput, PlantInfoUncheckedCreateWithoutGalleryImagesInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutGalleryImagesInput
    upsert?: PlantInfoUpsertWithoutGalleryImagesInput
    connect?: PlantInfoWhereUniqueInput
    update?: XOR<XOR<PlantInfoUpdateToOneWithWhereWithoutGalleryImagesInput, PlantInfoUpdateWithoutGalleryImagesInput>, PlantInfoUncheckedUpdateWithoutGalleryImagesInput>
  }

  export type PlantInfoCreateNestedOneWithoutConditionsInput = {
    create?: XOR<PlantInfoCreateWithoutConditionsInput, PlantInfoUncheckedCreateWithoutConditionsInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutConditionsInput
    connect?: PlantInfoWhereUniqueInput
  }

  export type PlantInfoUpdateOneRequiredWithoutConditionsNestedInput = {
    create?: XOR<PlantInfoCreateWithoutConditionsInput, PlantInfoUncheckedCreateWithoutConditionsInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutConditionsInput
    upsert?: PlantInfoUpsertWithoutConditionsInput
    connect?: PlantInfoWhereUniqueInput
    update?: XOR<XOR<PlantInfoUpdateToOneWithWhereWithoutConditionsInput, PlantInfoUpdateWithoutConditionsInput>, PlantInfoUncheckedUpdateWithoutConditionsInput>
  }

  export type PlantInfoCreateNestedOneWithoutCareInstructionsInput = {
    create?: XOR<PlantInfoCreateWithoutCareInstructionsInput, PlantInfoUncheckedCreateWithoutCareInstructionsInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutCareInstructionsInput
    connect?: PlantInfoWhereUniqueInput
  }

  export type PlantInfoUpdateOneRequiredWithoutCareInstructionsNestedInput = {
    create?: XOR<PlantInfoCreateWithoutCareInstructionsInput, PlantInfoUncheckedCreateWithoutCareInstructionsInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutCareInstructionsInput
    upsert?: PlantInfoUpsertWithoutCareInstructionsInput
    connect?: PlantInfoWhereUniqueInput
    update?: XOR<XOR<PlantInfoUpdateToOneWithWhereWithoutCareInstructionsInput, PlantInfoUpdateWithoutCareInstructionsInput>, PlantInfoUncheckedUpdateWithoutCareInstructionsInput>
  }

  export type PlantInfoCreateNestedOneWithoutPestsInput = {
    create?: XOR<PlantInfoCreateWithoutPestsInput, PlantInfoUncheckedCreateWithoutPestsInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutPestsInput
    connect?: PlantInfoWhereUniqueInput
  }

  export type PlantInfoUpdateOneRequiredWithoutPestsNestedInput = {
    create?: XOR<PlantInfoCreateWithoutPestsInput, PlantInfoUncheckedCreateWithoutPestsInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutPestsInput
    upsert?: PlantInfoUpsertWithoutPestsInput
    connect?: PlantInfoWhereUniqueInput
    update?: XOR<XOR<PlantInfoUpdateToOneWithWhereWithoutPestsInput, PlantInfoUpdateWithoutPestsInput>, PlantInfoUncheckedUpdateWithoutPestsInput>
  }

  export type PlantInfoCreateNestedOneWithoutFeaturesInput = {
    create?: XOR<PlantInfoCreateWithoutFeaturesInput, PlantInfoUncheckedCreateWithoutFeaturesInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutFeaturesInput
    connect?: PlantInfoWhereUniqueInput
  }

  export type PlantInfoUpdateOneRequiredWithoutFeaturesNestedInput = {
    create?: XOR<PlantInfoCreateWithoutFeaturesInput, PlantInfoUncheckedCreateWithoutFeaturesInput>
    connectOrCreate?: PlantInfoCreateOrConnectWithoutFeaturesInput
    upsert?: PlantInfoUpsertWithoutFeaturesInput
    connect?: PlantInfoWhereUniqueInput
    update?: XOR<XOR<PlantInfoUpdateToOneWithWhereWithoutFeaturesInput, PlantInfoUpdateWithoutFeaturesInput>, PlantInfoUncheckedUpdateWithoutFeaturesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CustomerCreateWithoutUserInput = {
    firstName: string
    lastName: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUncheckedCreateWithoutUserInput = {
    id?: number
    firstName: string
    lastName: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerCreateOrConnectWithoutUserInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
  }

  export type AdminCreateWithoutUserInput = {
    firstName: string
    lastName: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUncheckedCreateWithoutUserInput = {
    id?: number
    firstName: string
    lastName: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type CustomerUpsertWithoutUserInput = {
    update: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutUserInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type CustomerUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUpsertWithoutUserInput = {
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutCustomerInput = {
    email: string
    password: string
    username: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCustomerInput = {
    id?: number
    email: string
    password: string
    username: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCustomerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
  }

  export type UserUpsertWithoutCustomerInput = {
    update: XOR<UserUpdateWithoutCustomerInput, UserUncheckedUpdateWithoutCustomerInput>
    create: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustomerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustomerInput, UserUncheckedUpdateWithoutCustomerInput>
  }

  export type UserUpdateWithoutCustomerInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutAdminInput = {
    email: string
    password: string
    username: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminInput = {
    id?: number
    email: string
    password: string
    username: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type UserUpsertWithoutAdminInput = {
    update: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserUpdateWithoutAdminInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PlantInfoCreateWithoutCategoryInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    galleryImages?: PlantGalleryCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareCreateNestedOneWithoutPlantInput
    pests?: PlantPestCreateNestedManyWithoutPlantInput
    features?: PlantFeatureCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    galleryImages?: PlantGalleryUncheckedCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsUncheckedCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareUncheckedCreateNestedOneWithoutPlantInput
    pests?: PlantPestUncheckedCreateNestedManyWithoutPlantInput
    features?: PlantFeatureUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoCreateOrConnectWithoutCategoryInput = {
    where: PlantInfoWhereUniqueInput
    create: XOR<PlantInfoCreateWithoutCategoryInput, PlantInfoUncheckedCreateWithoutCategoryInput>
  }

  export type PlantInfoCreateManyCategoryInputEnvelope = {
    data: PlantInfoCreateManyCategoryInput | PlantInfoCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type PlantInfoUpsertWithWhereUniqueWithoutCategoryInput = {
    where: PlantInfoWhereUniqueInput
    update: XOR<PlantInfoUpdateWithoutCategoryInput, PlantInfoUncheckedUpdateWithoutCategoryInput>
    create: XOR<PlantInfoCreateWithoutCategoryInput, PlantInfoUncheckedCreateWithoutCategoryInput>
  }

  export type PlantInfoUpdateWithWhereUniqueWithoutCategoryInput = {
    where: PlantInfoWhereUniqueInput
    data: XOR<PlantInfoUpdateWithoutCategoryInput, PlantInfoUncheckedUpdateWithoutCategoryInput>
  }

  export type PlantInfoUpdateManyWithWhereWithoutCategoryInput = {
    where: PlantInfoScalarWhereInput
    data: XOR<PlantInfoUpdateManyMutationInput, PlantInfoUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PlantInfoScalarWhereInput = {
    AND?: PlantInfoScalarWhereInput | PlantInfoScalarWhereInput[]
    OR?: PlantInfoScalarWhereInput[]
    NOT?: PlantInfoScalarWhereInput | PlantInfoScalarWhereInput[]
    id?: StringFilter<"PlantInfo"> | string
    name?: StringFilter<"PlantInfo"> | string
    scientificName?: StringFilter<"PlantInfo"> | string
    genus?: StringFilter<"PlantInfo"> | string
    imageUrl?: StringFilter<"PlantInfo"> | string
    description?: StringFilter<"PlantInfo"> | string
    categoryId?: StringFilter<"PlantInfo"> | string
    createdAt?: DateTimeFilter<"PlantInfo"> | Date | string
    updatedAt?: DateTimeFilter<"PlantInfo"> | Date | string
  }

  export type PlantCategoryCreateWithoutPlantsInput = {
    id?: string
    name: string
    imageUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlantCategoryUncheckedCreateWithoutPlantsInput = {
    id?: string
    name: string
    imageUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlantCategoryCreateOrConnectWithoutPlantsInput = {
    where: PlantCategoryWhereUniqueInput
    create: XOR<PlantCategoryCreateWithoutPlantsInput, PlantCategoryUncheckedCreateWithoutPlantsInput>
  }

  export type PlantGalleryCreateWithoutPlantInput = {
    id?: string
    imageUrl: string
  }

  export type PlantGalleryUncheckedCreateWithoutPlantInput = {
    id?: string
    imageUrl: string
  }

  export type PlantGalleryCreateOrConnectWithoutPlantInput = {
    where: PlantGalleryWhereUniqueInput
    create: XOR<PlantGalleryCreateWithoutPlantInput, PlantGalleryUncheckedCreateWithoutPlantInput>
  }

  export type PlantGalleryCreateManyPlantInputEnvelope = {
    data: PlantGalleryCreateManyPlantInput | PlantGalleryCreateManyPlantInput[]
    skipDuplicates?: boolean
  }

  export type PlantConditionsCreateWithoutPlantInput = {
    id?: string
    temperature: string
    sunlight: string
    hardinessZone: string
    soil: string
    growthRate: string
    caution: string
  }

  export type PlantConditionsUncheckedCreateWithoutPlantInput = {
    id?: string
    temperature: string
    sunlight: string
    hardinessZone: string
    soil: string
    growthRate: string
    caution: string
  }

  export type PlantConditionsCreateOrConnectWithoutPlantInput = {
    where: PlantConditionsWhereUniqueInput
    create: XOR<PlantConditionsCreateWithoutPlantInput, PlantConditionsUncheckedCreateWithoutPlantInput>
  }

  export type PlantCareCreateWithoutPlantInput = {
    id?: string
    watering: string
    fertilizer: string
    pruning: string
    propagation: string
    repotting: string
    humidity: string
  }

  export type PlantCareUncheckedCreateWithoutPlantInput = {
    id?: string
    watering: string
    fertilizer: string
    pruning: string
    propagation: string
    repotting: string
    humidity: string
  }

  export type PlantCareCreateOrConnectWithoutPlantInput = {
    where: PlantCareWhereUniqueInput
    create: XOR<PlantCareCreateWithoutPlantInput, PlantCareUncheckedCreateWithoutPlantInput>
  }

  export type PlantPestCreateWithoutPlantInput = {
    id?: string
    name: string
  }

  export type PlantPestUncheckedCreateWithoutPlantInput = {
    id?: string
    name: string
  }

  export type PlantPestCreateOrConnectWithoutPlantInput = {
    where: PlantPestWhereUniqueInput
    create: XOR<PlantPestCreateWithoutPlantInput, PlantPestUncheckedCreateWithoutPlantInput>
  }

  export type PlantPestCreateManyPlantInputEnvelope = {
    data: PlantPestCreateManyPlantInput | PlantPestCreateManyPlantInput[]
    skipDuplicates?: boolean
  }

  export type PlantFeatureCreateWithoutPlantInput = {
    id?: string
    detail: string
  }

  export type PlantFeatureUncheckedCreateWithoutPlantInput = {
    id?: string
    detail: string
  }

  export type PlantFeatureCreateOrConnectWithoutPlantInput = {
    where: PlantFeatureWhereUniqueInput
    create: XOR<PlantFeatureCreateWithoutPlantInput, PlantFeatureUncheckedCreateWithoutPlantInput>
  }

  export type PlantFeatureCreateManyPlantInputEnvelope = {
    data: PlantFeatureCreateManyPlantInput | PlantFeatureCreateManyPlantInput[]
    skipDuplicates?: boolean
  }

  export type PlantCategoryUpsertWithoutPlantsInput = {
    update: XOR<PlantCategoryUpdateWithoutPlantsInput, PlantCategoryUncheckedUpdateWithoutPlantsInput>
    create: XOR<PlantCategoryCreateWithoutPlantsInput, PlantCategoryUncheckedCreateWithoutPlantsInput>
    where?: PlantCategoryWhereInput
  }

  export type PlantCategoryUpdateToOneWithWhereWithoutPlantsInput = {
    where?: PlantCategoryWhereInput
    data: XOR<PlantCategoryUpdateWithoutPlantsInput, PlantCategoryUncheckedUpdateWithoutPlantsInput>
  }

  export type PlantCategoryUpdateWithoutPlantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantCategoryUncheckedUpdateWithoutPlantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantGalleryUpsertWithWhereUniqueWithoutPlantInput = {
    where: PlantGalleryWhereUniqueInput
    update: XOR<PlantGalleryUpdateWithoutPlantInput, PlantGalleryUncheckedUpdateWithoutPlantInput>
    create: XOR<PlantGalleryCreateWithoutPlantInput, PlantGalleryUncheckedCreateWithoutPlantInput>
  }

  export type PlantGalleryUpdateWithWhereUniqueWithoutPlantInput = {
    where: PlantGalleryWhereUniqueInput
    data: XOR<PlantGalleryUpdateWithoutPlantInput, PlantGalleryUncheckedUpdateWithoutPlantInput>
  }

  export type PlantGalleryUpdateManyWithWhereWithoutPlantInput = {
    where: PlantGalleryScalarWhereInput
    data: XOR<PlantGalleryUpdateManyMutationInput, PlantGalleryUncheckedUpdateManyWithoutPlantInput>
  }

  export type PlantGalleryScalarWhereInput = {
    AND?: PlantGalleryScalarWhereInput | PlantGalleryScalarWhereInput[]
    OR?: PlantGalleryScalarWhereInput[]
    NOT?: PlantGalleryScalarWhereInput | PlantGalleryScalarWhereInput[]
    id?: StringFilter<"PlantGallery"> | string
    imageUrl?: StringFilter<"PlantGallery"> | string
    plantId?: StringFilter<"PlantGallery"> | string
  }

  export type PlantConditionsUpsertWithoutPlantInput = {
    update: XOR<PlantConditionsUpdateWithoutPlantInput, PlantConditionsUncheckedUpdateWithoutPlantInput>
    create: XOR<PlantConditionsCreateWithoutPlantInput, PlantConditionsUncheckedCreateWithoutPlantInput>
    where?: PlantConditionsWhereInput
  }

  export type PlantConditionsUpdateToOneWithWhereWithoutPlantInput = {
    where?: PlantConditionsWhereInput
    data: XOR<PlantConditionsUpdateWithoutPlantInput, PlantConditionsUncheckedUpdateWithoutPlantInput>
  }

  export type PlantConditionsUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    temperature?: StringFieldUpdateOperationsInput | string
    sunlight?: StringFieldUpdateOperationsInput | string
    hardinessZone?: StringFieldUpdateOperationsInput | string
    soil?: StringFieldUpdateOperationsInput | string
    growthRate?: StringFieldUpdateOperationsInput | string
    caution?: StringFieldUpdateOperationsInput | string
  }

  export type PlantConditionsUncheckedUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    temperature?: StringFieldUpdateOperationsInput | string
    sunlight?: StringFieldUpdateOperationsInput | string
    hardinessZone?: StringFieldUpdateOperationsInput | string
    soil?: StringFieldUpdateOperationsInput | string
    growthRate?: StringFieldUpdateOperationsInput | string
    caution?: StringFieldUpdateOperationsInput | string
  }

  export type PlantCareUpsertWithoutPlantInput = {
    update: XOR<PlantCareUpdateWithoutPlantInput, PlantCareUncheckedUpdateWithoutPlantInput>
    create: XOR<PlantCareCreateWithoutPlantInput, PlantCareUncheckedCreateWithoutPlantInput>
    where?: PlantCareWhereInput
  }

  export type PlantCareUpdateToOneWithWhereWithoutPlantInput = {
    where?: PlantCareWhereInput
    data: XOR<PlantCareUpdateWithoutPlantInput, PlantCareUncheckedUpdateWithoutPlantInput>
  }

  export type PlantCareUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    watering?: StringFieldUpdateOperationsInput | string
    fertilizer?: StringFieldUpdateOperationsInput | string
    pruning?: StringFieldUpdateOperationsInput | string
    propagation?: StringFieldUpdateOperationsInput | string
    repotting?: StringFieldUpdateOperationsInput | string
    humidity?: StringFieldUpdateOperationsInput | string
  }

  export type PlantCareUncheckedUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    watering?: StringFieldUpdateOperationsInput | string
    fertilizer?: StringFieldUpdateOperationsInput | string
    pruning?: StringFieldUpdateOperationsInput | string
    propagation?: StringFieldUpdateOperationsInput | string
    repotting?: StringFieldUpdateOperationsInput | string
    humidity?: StringFieldUpdateOperationsInput | string
  }

  export type PlantPestUpsertWithWhereUniqueWithoutPlantInput = {
    where: PlantPestWhereUniqueInput
    update: XOR<PlantPestUpdateWithoutPlantInput, PlantPestUncheckedUpdateWithoutPlantInput>
    create: XOR<PlantPestCreateWithoutPlantInput, PlantPestUncheckedCreateWithoutPlantInput>
  }

  export type PlantPestUpdateWithWhereUniqueWithoutPlantInput = {
    where: PlantPestWhereUniqueInput
    data: XOR<PlantPestUpdateWithoutPlantInput, PlantPestUncheckedUpdateWithoutPlantInput>
  }

  export type PlantPestUpdateManyWithWhereWithoutPlantInput = {
    where: PlantPestScalarWhereInput
    data: XOR<PlantPestUpdateManyMutationInput, PlantPestUncheckedUpdateManyWithoutPlantInput>
  }

  export type PlantPestScalarWhereInput = {
    AND?: PlantPestScalarWhereInput | PlantPestScalarWhereInput[]
    OR?: PlantPestScalarWhereInput[]
    NOT?: PlantPestScalarWhereInput | PlantPestScalarWhereInput[]
    id?: StringFilter<"PlantPest"> | string
    name?: StringFilter<"PlantPest"> | string
    plantId?: StringFilter<"PlantPest"> | string
  }

  export type PlantFeatureUpsertWithWhereUniqueWithoutPlantInput = {
    where: PlantFeatureWhereUniqueInput
    update: XOR<PlantFeatureUpdateWithoutPlantInput, PlantFeatureUncheckedUpdateWithoutPlantInput>
    create: XOR<PlantFeatureCreateWithoutPlantInput, PlantFeatureUncheckedCreateWithoutPlantInput>
  }

  export type PlantFeatureUpdateWithWhereUniqueWithoutPlantInput = {
    where: PlantFeatureWhereUniqueInput
    data: XOR<PlantFeatureUpdateWithoutPlantInput, PlantFeatureUncheckedUpdateWithoutPlantInput>
  }

  export type PlantFeatureUpdateManyWithWhereWithoutPlantInput = {
    where: PlantFeatureScalarWhereInput
    data: XOR<PlantFeatureUpdateManyMutationInput, PlantFeatureUncheckedUpdateManyWithoutPlantInput>
  }

  export type PlantFeatureScalarWhereInput = {
    AND?: PlantFeatureScalarWhereInput | PlantFeatureScalarWhereInput[]
    OR?: PlantFeatureScalarWhereInput[]
    NOT?: PlantFeatureScalarWhereInput | PlantFeatureScalarWhereInput[]
    id?: StringFilter<"PlantFeature"> | string
    detail?: StringFilter<"PlantFeature"> | string
    plantId?: StringFilter<"PlantFeature"> | string
  }

  export type PlantInfoCreateWithoutGalleryImagesInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: PlantCategoryCreateNestedOneWithoutPlantsInput
    conditions?: PlantConditionsCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareCreateNestedOneWithoutPlantInput
    pests?: PlantPestCreateNestedManyWithoutPlantInput
    features?: PlantFeatureCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoUncheckedCreateWithoutGalleryImagesInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: PlantConditionsUncheckedCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareUncheckedCreateNestedOneWithoutPlantInput
    pests?: PlantPestUncheckedCreateNestedManyWithoutPlantInput
    features?: PlantFeatureUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoCreateOrConnectWithoutGalleryImagesInput = {
    where: PlantInfoWhereUniqueInput
    create: XOR<PlantInfoCreateWithoutGalleryImagesInput, PlantInfoUncheckedCreateWithoutGalleryImagesInput>
  }

  export type PlantInfoUpsertWithoutGalleryImagesInput = {
    update: XOR<PlantInfoUpdateWithoutGalleryImagesInput, PlantInfoUncheckedUpdateWithoutGalleryImagesInput>
    create: XOR<PlantInfoCreateWithoutGalleryImagesInput, PlantInfoUncheckedCreateWithoutGalleryImagesInput>
    where?: PlantInfoWhereInput
  }

  export type PlantInfoUpdateToOneWithWhereWithoutGalleryImagesInput = {
    where?: PlantInfoWhereInput
    data: XOR<PlantInfoUpdateWithoutGalleryImagesInput, PlantInfoUncheckedUpdateWithoutGalleryImagesInput>
  }

  export type PlantInfoUpdateWithoutGalleryImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: PlantCategoryUpdateOneRequiredWithoutPlantsNestedInput
    conditions?: PlantConditionsUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoUncheckedUpdateWithoutGalleryImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: PlantConditionsUncheckedUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUncheckedUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUncheckedUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoCreateWithoutConditionsInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: PlantCategoryCreateNestedOneWithoutPlantsInput
    galleryImages?: PlantGalleryCreateNestedManyWithoutPlantInput
    careInstructions?: PlantCareCreateNestedOneWithoutPlantInput
    pests?: PlantPestCreateNestedManyWithoutPlantInput
    features?: PlantFeatureCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoUncheckedCreateWithoutConditionsInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    galleryImages?: PlantGalleryUncheckedCreateNestedManyWithoutPlantInput
    careInstructions?: PlantCareUncheckedCreateNestedOneWithoutPlantInput
    pests?: PlantPestUncheckedCreateNestedManyWithoutPlantInput
    features?: PlantFeatureUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoCreateOrConnectWithoutConditionsInput = {
    where: PlantInfoWhereUniqueInput
    create: XOR<PlantInfoCreateWithoutConditionsInput, PlantInfoUncheckedCreateWithoutConditionsInput>
  }

  export type PlantInfoUpsertWithoutConditionsInput = {
    update: XOR<PlantInfoUpdateWithoutConditionsInput, PlantInfoUncheckedUpdateWithoutConditionsInput>
    create: XOR<PlantInfoCreateWithoutConditionsInput, PlantInfoUncheckedCreateWithoutConditionsInput>
    where?: PlantInfoWhereInput
  }

  export type PlantInfoUpdateToOneWithWhereWithoutConditionsInput = {
    where?: PlantInfoWhereInput
    data: XOR<PlantInfoUpdateWithoutConditionsInput, PlantInfoUncheckedUpdateWithoutConditionsInput>
  }

  export type PlantInfoUpdateWithoutConditionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: PlantCategoryUpdateOneRequiredWithoutPlantsNestedInput
    galleryImages?: PlantGalleryUpdateManyWithoutPlantNestedInput
    careInstructions?: PlantCareUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoUncheckedUpdateWithoutConditionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    galleryImages?: PlantGalleryUncheckedUpdateManyWithoutPlantNestedInput
    careInstructions?: PlantCareUncheckedUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUncheckedUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoCreateWithoutCareInstructionsInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: PlantCategoryCreateNestedOneWithoutPlantsInput
    galleryImages?: PlantGalleryCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsCreateNestedOneWithoutPlantInput
    pests?: PlantPestCreateNestedManyWithoutPlantInput
    features?: PlantFeatureCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoUncheckedCreateWithoutCareInstructionsInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    galleryImages?: PlantGalleryUncheckedCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsUncheckedCreateNestedOneWithoutPlantInput
    pests?: PlantPestUncheckedCreateNestedManyWithoutPlantInput
    features?: PlantFeatureUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoCreateOrConnectWithoutCareInstructionsInput = {
    where: PlantInfoWhereUniqueInput
    create: XOR<PlantInfoCreateWithoutCareInstructionsInput, PlantInfoUncheckedCreateWithoutCareInstructionsInput>
  }

  export type PlantInfoUpsertWithoutCareInstructionsInput = {
    update: XOR<PlantInfoUpdateWithoutCareInstructionsInput, PlantInfoUncheckedUpdateWithoutCareInstructionsInput>
    create: XOR<PlantInfoCreateWithoutCareInstructionsInput, PlantInfoUncheckedCreateWithoutCareInstructionsInput>
    where?: PlantInfoWhereInput
  }

  export type PlantInfoUpdateToOneWithWhereWithoutCareInstructionsInput = {
    where?: PlantInfoWhereInput
    data: XOR<PlantInfoUpdateWithoutCareInstructionsInput, PlantInfoUncheckedUpdateWithoutCareInstructionsInput>
  }

  export type PlantInfoUpdateWithoutCareInstructionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: PlantCategoryUpdateOneRequiredWithoutPlantsNestedInput
    galleryImages?: PlantGalleryUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoUncheckedUpdateWithoutCareInstructionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    galleryImages?: PlantGalleryUncheckedUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUncheckedUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUncheckedUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoCreateWithoutPestsInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: PlantCategoryCreateNestedOneWithoutPlantsInput
    galleryImages?: PlantGalleryCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareCreateNestedOneWithoutPlantInput
    features?: PlantFeatureCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoUncheckedCreateWithoutPestsInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    galleryImages?: PlantGalleryUncheckedCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsUncheckedCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareUncheckedCreateNestedOneWithoutPlantInput
    features?: PlantFeatureUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoCreateOrConnectWithoutPestsInput = {
    where: PlantInfoWhereUniqueInput
    create: XOR<PlantInfoCreateWithoutPestsInput, PlantInfoUncheckedCreateWithoutPestsInput>
  }

  export type PlantInfoUpsertWithoutPestsInput = {
    update: XOR<PlantInfoUpdateWithoutPestsInput, PlantInfoUncheckedUpdateWithoutPestsInput>
    create: XOR<PlantInfoCreateWithoutPestsInput, PlantInfoUncheckedCreateWithoutPestsInput>
    where?: PlantInfoWhereInput
  }

  export type PlantInfoUpdateToOneWithWhereWithoutPestsInput = {
    where?: PlantInfoWhereInput
    data: XOR<PlantInfoUpdateWithoutPestsInput, PlantInfoUncheckedUpdateWithoutPestsInput>
  }

  export type PlantInfoUpdateWithoutPestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: PlantCategoryUpdateOneRequiredWithoutPlantsNestedInput
    galleryImages?: PlantGalleryUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUpdateOneWithoutPlantNestedInput
    features?: PlantFeatureUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoUncheckedUpdateWithoutPestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    galleryImages?: PlantGalleryUncheckedUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUncheckedUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUncheckedUpdateOneWithoutPlantNestedInput
    features?: PlantFeatureUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoCreateWithoutFeaturesInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: PlantCategoryCreateNestedOneWithoutPlantsInput
    galleryImages?: PlantGalleryCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareCreateNestedOneWithoutPlantInput
    pests?: PlantPestCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoUncheckedCreateWithoutFeaturesInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    galleryImages?: PlantGalleryUncheckedCreateNestedManyWithoutPlantInput
    conditions?: PlantConditionsUncheckedCreateNestedOneWithoutPlantInput
    careInstructions?: PlantCareUncheckedCreateNestedOneWithoutPlantInput
    pests?: PlantPestUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantInfoCreateOrConnectWithoutFeaturesInput = {
    where: PlantInfoWhereUniqueInput
    create: XOR<PlantInfoCreateWithoutFeaturesInput, PlantInfoUncheckedCreateWithoutFeaturesInput>
  }

  export type PlantInfoUpsertWithoutFeaturesInput = {
    update: XOR<PlantInfoUpdateWithoutFeaturesInput, PlantInfoUncheckedUpdateWithoutFeaturesInput>
    create: XOR<PlantInfoCreateWithoutFeaturesInput, PlantInfoUncheckedCreateWithoutFeaturesInput>
    where?: PlantInfoWhereInput
  }

  export type PlantInfoUpdateToOneWithWhereWithoutFeaturesInput = {
    where?: PlantInfoWhereInput
    data: XOR<PlantInfoUpdateWithoutFeaturesInput, PlantInfoUncheckedUpdateWithoutFeaturesInput>
  }

  export type PlantInfoUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: PlantCategoryUpdateOneRequiredWithoutPlantsNestedInput
    galleryImages?: PlantGalleryUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoUncheckedUpdateWithoutFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    galleryImages?: PlantGalleryUncheckedUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUncheckedUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUncheckedUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoCreateManyCategoryInput = {
    id?: string
    name: string
    scientificName: string
    genus: string
    imageUrl: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlantInfoUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    galleryImages?: PlantGalleryUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    galleryImages?: PlantGalleryUncheckedUpdateManyWithoutPlantNestedInput
    conditions?: PlantConditionsUncheckedUpdateOneWithoutPlantNestedInput
    careInstructions?: PlantCareUncheckedUpdateOneWithoutPlantNestedInput
    pests?: PlantPestUncheckedUpdateManyWithoutPlantNestedInput
    features?: PlantFeatureUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type PlantInfoUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scientificName?: StringFieldUpdateOperationsInput | string
    genus?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantGalleryCreateManyPlantInput = {
    id?: string
    imageUrl: string
  }

  export type PlantPestCreateManyPlantInput = {
    id?: string
    name: string
  }

  export type PlantFeatureCreateManyPlantInput = {
    id?: string
    detail: string
  }

  export type PlantGalleryUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type PlantGalleryUncheckedUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type PlantGalleryUncheckedUpdateManyWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type PlantPestUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantPestUncheckedUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantPestUncheckedUpdateManyWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantFeatureUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
  }

  export type PlantFeatureUncheckedUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
  }

  export type PlantFeatureUncheckedUpdateManyWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}